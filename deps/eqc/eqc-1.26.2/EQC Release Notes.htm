<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<script type="text/javascript">
var version = {major: 2, minor: 0, revision: 2, date: new Date("Jan 11, 2006"), extensions: {}};
</script>
<!--
TiddlyWiki 2.0.2 by Jeremy Ruston, (jeremy [at] osmosoft [dot] com)

Copyright (c) Osmosoft Limited 2004-2006

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

Redistributions in binary form must reproduce the above copyright notice, this
list of conditions and the following disclaimer in the documentation and/or other
materials provided with the distribution.

Neither the name of the Osmosoft Limited nor the names of its contributors may be
used to endorse or promote products derived from this software without specific
prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.
-->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" >
<title>EQC Release Notes - version 1.26</title>
<script type="text/javascript">

// ---------------------------------------------------------------------------------
// Configuration repository
// ---------------------------------------------------------------------------------

// Miscellaneous options
var config = {
	numRssItems: 20, // Number of items in the RSS feed
	animFast: 0.12, // Speed for animations (lower == slower)
	animSlow: 0.01, // Speed for EasterEgg animations
	cascadeFast: 20, // Speed for cascade animations (higher == slower)
	cascadeSlow: 60, // Speed for EasterEgg cascade animations
	cascadeDepth: 5 // Depth of cascade animation
	};

// Options that can be set in the options panel and/or cookies
config.options = {
	chkRegExpSearch: false,
	chkCaseSensitiveSearch: false,
	chkAnimate: true,
	txtUserName: "YourName",
	chkSaveBackups: true,
	chkAutoSave: false,
	chkGenerateAnRssFeed: false,
	chkSaveEmptyTemplate: false,
	chkOpenInNewWindow: true,
	chkToggleLinks: false,
	chkHttpReadOnly: false,
	chkForceMinorUpdate: false,
	chkConfirmDelete: true,
	txtBackupFolder: "",
	txtMainTab: "tabTimeline",
	txtMoreTab: "moreTabAll",
	txtMaxEditRows: "30"
	};
	
// List of notification functions to be called when certain tiddlers are changed or deleted
config.notifyTiddlers = [
	{name: "StyleSheetLayout", notify: refreshStyles},
	{name: "StyleSheetColors", notify: refreshStyles},
	{name: "StyleSheet", notify: refreshStyles},
	{name: "StyleSheetPrint", notify: refreshStyles},
	{name: "PageTemplate", notify: refreshPageTemplate},
	{name: null, notify: refreshDisplay}
	];

// Default tiddler templates
var DEFAULT_VIEW_TEMPLATE = 1;
var DEFAULT_EDIT_TEMPLATE = 2;
config.tiddlerTemplates = {
	1: "ViewTemplate",
	2: "EditTemplate"
	};

// Messages
config.messages = {
	customConfigError: "Error in systemConfig tiddler '%1' - %0",
	savedSnapshotError: "It appears that this TiddlyWiki has been incorrectly saved. Please see http://www.tiddlywiki.com/#DownloadSoftware for details",
	subtitleUnknown: "(unknown)",
	undefinedTiddlerToolTip: "The tiddler '%0' doesn't yet exist",
	shadowedTiddlerToolTip: "The tiddler '%0' doesn't yet exist, but has a pre-defined shadow value",
	externalLinkTooltip: "External link to %0",
	noTags: "There are no tagged tiddlers",
	notFileUrlError: "You need to save this TiddlyWiki to a file before you can save changes",
	cantSaveError: "It's not possible to save changes using this browser. Use FireFox if you can",
	invalidFileError: "The original file '%0' does not appear to be a valid TiddlyWiki",
	backupSaved: "Backup saved",
	backupFailed: "Failed to save backup file",
	rssSaved: "RSS feed saved",
	rssFailed: "Failed to save RSS feed file",
	emptySaved: "Empty template saved",
	emptyFailed: "Failed to save empty template file",
	mainSaved: "Main TiddlyWiki file saved",
	mainFailed: "Failed to save main TiddlyWiki file. Your changes have not been saved",
	macroError: "Error in macro <<%0>>",
	macroErrorDetails: "Error while executing macro <<%0>>:\n%1",
	missingMacro: "No such macro",
	overwriteWarning: "A tiddler named '%0' already exists. Choose OK to overwrite it",
	unsavedChangesWarning: "WARNING! There are unsaved changes in TiddlyWiki\n\nChoose OK to save\nChoose CANCEL to discard",
	messageClose: {text: "close", tooltip: "close this message area"},
	dates: {
		months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November","December"],
		days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
		}
	};

// More messages (rather a legacy layout that shouldn't really be like this)
config.views = {
	wikified: {
		tag: {labelNoTags: "no tags", labelTags: "tags: ", openTag: "Open tag '%0'", tooltip: "Show tiddlers tagged with '%0'", openAllText: "Open all", openAllTooltip: "Open all of these tiddlers", popupNone: "No other tiddlers tagged with '%0'"},
		defaultText: "The tiddler '%0' doesn't yet exist. Double-click to create it",
		defaultModifier: "(missing)",
		shadowModifier: "(shadow)"
		},
	editor: {
		tagPrompt: "Type tags separated with spaces, [[use double square brackets]] if necessary, or add existing",
		tagChooser: {text: "tags", tooltip: "Choose existing tags to add to this tiddler", popupNone: "There are no tags defined", tagTooltip: "Add the tag '%0'"},
		defaultText: "Type the text for '%0'"
		}
	};
		
// Macros; each has a 'handler' member that is inserted later
config.macros = {
	today: {},
	version: {},
	search: {label: "search", prompt: "Search this TiddlyWiki", sizeTextbox: 15, accessKey: "F", successMsg: "%0 tiddlers found matching %1", failureMsg: "No tiddlers found matching %0"},
	tiddler: {},
	tag: {},
	tags: {},
	tagging: {label: "tagging:", labelNotTag: "not tagging", tooltip: "List of tiddlers tagged with '%0'"},
	timeline: {dateFormat: "DD MMM YYYY"},
	allTags: {tooltip: "Show tiddlers tagged with '%0'", noTags: "There are no tagged tiddlers"},
	list: {
		all: {prompt: "All tiddlers in alphabetical order"},
		missing: {prompt: "Tiddlers that have links to them but are not defined"},
		orphans: {prompt: "Tiddlers that are not linked to from any other tiddlers"},
		shadowed: {prompt: "Tiddlers shadowed with default contents"}
		},
	closeAll: {label: "close all", prompt: "Close all displayed tiddlers (except any that are being edited)"},
	permaview: {label: "permaview", prompt: "Link to an URL that retrieves all the currently displayed tiddlers"},
	saveChanges: {label: "save changes", prompt: "Save all tiddlers to create a new TiddlyWiki", accessKey: "S"},
	slider: {},
	option: {},
	newTiddler: {label: "new tiddler", prompt: "Create a new tiddler", title: "New Tiddler", accessKey: "N"},
	newJournal: {label: "new journal", prompt: "Create a new tiddler from the current date and time", accessKey: "J"},
	sparkline: {},
	tabs: {},
	gradient: {},
	message: {},
	view: {},
	edit: {},
	tagChooser: {},
	toolbar: {}
	};

// Commands supported by the toolbar macro
config.commands = {
	closeTiddler: {text: "close", tooltip: "Close this tiddler"},
	closeOthers: {text: "close others", tooltip: "Close all other tiddlers"},
	editTiddler: {text: "edit", tooltip: "Edit this tiddler"},
	saveTiddler: {text: "done", tooltip: "Save changes to this tiddler"},
	cancelTiddler: {text: "cancel", tooltip: "Undo changes to this tiddler"},
	deleteTiddler: {text: "delete", tooltip: "Delete this tiddler", warning: "Are you sure you want to delete '%0'?"},
	permalink: {text: "permalink", tooltip: "Permalink for this tiddler"},
	references: {text: "references", tooltip: "Show tiddlers that link to this one", popupNone: "No references"},
	jump: {text: "jump", tooltip: "Jump to another open tiddler"}
	};
	
// Browser detection... In a very few places, there's nothing else for it but to
// know what browser we're using.
config.userAgent = navigator.userAgent.toLowerCase();
config.browser = {
	isIE: config.userAgent.indexOf("msie") != -1 && config.userAgent.indexOf("opera") == -1,
	isSafari: config.userAgent.indexOf("applewebkit") != -1,
	isBadSafari: !((new RegExp("[\u0150\u0170]","g")).test("\u0150"))
	};

// Basic regular expressions
config.textPrimitives = {
	upperLetter: "[A-Z\u00c0-\u00de\u0150\u0170]",
	lowerLetter: "[a-z\u00df-\u00ff_0-9\\-\u0151\u0171]",
	anyLetter: "[A-Za-z\u00c0-\u00de\u00df-\u00ff_0-9\\-\u0150\u0170\u0151\u0171]"
	};
if(config.browser.isBadSafari)
	config.textPrimitives = {
		upperLetter: "[A-Z\u00c0-\u00de]",
		lowerLetter: "[a-z\u00df-\u00ff_0-9\\-]",
		anyLetter: "[A-Za-z\u00c0-\u00de\u00df-\u00ff_0-9\\-]"
		}
config.textPrimitives.anyDigit = "[0-9]";
config.textPrimitives.anyNumberChar = "[0-9\\.E]";
config.textPrimitives.urlPattern = "(?:file|http|https|mailto|ftp):[^\\s'\"]+(?:/|\\b)";
config.textPrimitives.unWikiLink = "~";
config.textPrimitives.wikiLink = "(?:" + config.textPrimitives.unWikiLink + "{0,1})(?:(?:" + config.textPrimitives.upperLetter + "+" +
											   config.textPrimitives.lowerLetter + "+" +
											   config.textPrimitives.upperLetter +
											   config.textPrimitives.anyLetter + "*)|(?:" +
											   config.textPrimitives.upperLetter + "{2,}" +
											   config.textPrimitives.lowerLetter + "+))";

// ---------------------------------------------------------------------------------
// Shadow tiddlers for emergencies
// ---------------------------------------------------------------------------------

config.shadowTiddlers = {
	DefaultTiddlers: "GettingStarted",
	MainMenu: "GettingStarted",
	SiteTitle: "My TiddlyWiki",
	SiteSubtitle: "a reusable non-linear personal web notebook",
	SiteUrl: "http://www.tiddlywiki.com/",
	GettingStarted: "To get started with this blank TiddlyWiki, you'll need to modify the following tiddlers:\n* SiteTitle & SiteSubtitle: The title and subtitle of the site, as shown above (after saving, they will also appear in the browser title bar)\n* MainMenu: The menu (usually on the left)\n* DefaultTiddlers: Contains the names of the tiddlers that you want to appear when the TiddlyWiki is opened\n",
	SideBarOptions: "<<search>><<closeAll>><<permaview>><<newTiddler>><<newJournal 'DD MMM YYYY'>><<saveChanges>><<slider chkSliderOptionsPanel OptionsPanel 'options »' 'Change TiddlyWiki advanced options'>>",
	OptionsPanel: "These InterfaceOptions for customising TiddlyWiki are saved in your browser\n\nYour username for signing your edits. Write it as a WikiWord (eg JoeBloggs)\n\n<<option txtUserName>>\n<<option chkSaveBackups>> SaveBackups\n<<option chkAutoSave>> AutoSave\n<<option chkRegExpSearch>> RegExpSearch\n<<option chkCaseSensitiveSearch>> CaseSensitiveSearch\n<<option chkAnimate>> EnableAnimations\n\nSee AdvancedOptions",
	AdvancedOptions: "<<option chkGenerateAnRssFeed>> GenerateAnRssFeed\n<<option chkOpenInNewWindow>> OpenLinksInNewWindow\n<<option chkSaveEmptyTemplate>> SaveEmptyTemplate\n<<option chkToggleLinks>> Clicking on links to tiddlers that are already open causes them to close\n^^(override with Control or other modifier key)^^\n<<option chkHttpReadOnly>> HideEditingFeatures when viewed over HTTP\n<<option chkForceMinorUpdate>> Treat edits as MinorChanges by preserving date and time\n^^(override with Shift key when clicking 'done' or by pressing Ctrl-Shift-Enter^^\n<<option chkConfirmDelete>> ConfirmBeforeDeleting\nMaximum number of lines in a tiddler edit box: <<option txtMaxEditRows>>\nFolder name for backup files: <<option txtBackupFolder>>\n",
	SideBarTabs: "<<tabs txtMainTab Timeline Timeline TabTimeline All 'All tiddlers' TabAll Tags 'All tags' TabTags More 'More lists' TabMore>>",
	TabTimeline: "<<timeline>>",
	TabAll: "<<list all>>",
	TabTags: "<<allTags>>",
	TabMore: "<<tabs txtMoreTab Missing 'Missing tiddlers' TabMoreMissing Orphans 'Orphaned tiddlers' TabMoreOrphans>>",
	TabMoreMissing: "<<list missing>>",
	TabMoreOrphans: "<<list orphans>>",
	StyleSheetColors: "/***\n!Colors Used\n*@@bgcolor(#8cf): #8cf - Background blue@@\n*@@bgcolor(#18f): #18f - Top blue@@\n*@@bgcolor(#04b): #04b - Mid blue@@\n*@@bgcolor(#014):color(#fff): #014 - Bottom blue@@\n*@@bgcolor(#ffc): #ffc - Bright yellow@@\n*@@bgcolor(#fe8): #fe8 - Highlight yellow@@\n*@@bgcolor(#db4): #db4 - Background yellow@@\n*@@bgcolor(#841): #841 - Border yellow@@\n*@@bgcolor(#703):color(#fff): #703 - Title red@@\n*@@bgcolor(#866): #866 - Subtitle grey@@\n!Generic Rules /%==============================================%/\n***/\n/*{{{*/\nbody {\n	background: #fff;\n	color: #000;\n}\n\na{\n	color: #04b;\n}\n\na:hover{\n	background: #04b;\n	color: #fff;\n}\n\na img{\n	border: 0;\n}\n\nh1,h2,h3,h4,h5 {\n	color: #703;\n	background: #8cf;\n}\n\n.button {\n	color: #014;\n	border: 1px solid #fff;\n}\n\n.button:hover {\n	color: #014;\n	background: #fe8;\n	border: 1px solid #db4;\n}\n\n.button:active {\n	color: #fff;\n	background: #db4;\n	border: 1px solid #841;\n}\n\n/*}}}*/\n/***\n!Header /%==================================================%/\n***/\n/*{{{*/\n.header {\n	background: #04b;\n}\n\n.headerShadow {\n	color: #000;\n}\n\n.headerShadow a {\n	font-weight: normal;\n	color: #000;\n}\n\n.headerForeground {\n	color: #fff;\n}\n\n.headerForeground a {\n	font-weight: normal;\n	color: #8cf;\n}\n\n/*}}}*/\n/***\n!General tabs /%=================================================%/\n***/\n/*{{{*/\n\n.tabSelected{\n	color: #014;\n	background: #eee;\n	border-left: 1px solid #ccc;\n	border-top: 1px solid #ccc;\n	border-right: 1px solid #ccc;\n}\n\n.tabUnselected {\n	color: #fff;\n	background: #999;\n}\n\n.tabContents {\n	color: #014;\n	background: #eee;\n	border: 1px solid #ccc;\n}\n\n.tabContents .button {\n   border: 0;}\n\n/*}}}*/\n/***\n!Sidebar options /%=================================================%/\n~TiddlyLinks and buttons are treated identically in the sidebar and slider panel\n***/\n/*{{{*/\n#sidebar {\n}\n\n#sidebarOptions input {\n	border: 1px solid #04b;\n}\n\n#sidebarOptions .sliderPanel {\n	background: #8cf;\n}\n\n#sidebarOptions .sliderPanel a {\n	border: none;\n	color: #04b;\n}\n\n#sidebarOptions .sliderPanel a:hover {\n	color: #fff;\n	background: #04b;\n}\n\n#sidebarOptions .sliderPanel a:active {\n	color: #04b;\n	background: #fff;\n}\n/*}}}*/\n/***\n!Message Area /%=================================================%/\n***/\n/*{{{*/\n#messageArea {\n	border: 1px solid #841;\n	background: #db4;\n	color: #014;\n}\n\n#messageArea .button {\n	padding: 0.2em 0.2em 0.2em 0.2em;\n	color: #014;\n	background: #fff;\n}\n\n/*}}}*/\n/***\n!Popup /%=================================================%/\n***/\n/*{{{*/\n.popup {\n	background: #18f;\n	border: 1px solid #04b;\n}\n\n.popup hr {\n	color: #014;\n	background: #014;\n	border-bottom: 1px;\n}\n\n.popup li.disabled {\n	color: #04b;\n}\n\n.popup li a, .popup li a:visited {\n	color: #eee;\n	border: none;\n}\n\n.popup li a:hover {\n	background: #014;\n	color: #fff;\n	border: none;\n}\n/*}}}*/\n/***\n!Tiddler Display /%=================================================%/\n***/\n/*{{{*/\n.tiddler .defaultCommand {\n font-weight: bold;\n}\n\n.shadow .title {\n	color: #866;\n}\n\n.title {\n	color: #703;\n}\n\n.subtitle {\n	color: #866;\n}\n\n.toolbar {\n	color: #04b;\n}\n\n.tagging, .tagged {\n	border: 1px solid #eee;\n	background-color: #eee;\n}\n\n.selected .tagging, .selected .tagged {\n	background-color: #ddd;\n	border: 1px solid #bbb;\n}\n\n.tagging .listTitle, .tagged .listTitle {\n	color: #014;\n}\n\n.tagging .button, .tagged .button {\n    border: none;\n}\n\n.footer {\n	color: #ddd;\n}\n\n.selected .footer {\n	color: #888;\n}\n\n.sparkline {\n	background: #8cf;\n	border: 0;\n}\n\n.sparktick {\n	background: #014;\n}\n\n.errorButton {\n	color: #ff0;\n	background: #f00;\n}\n\n.cascade {\n	background: #eef;\n	color: #aac;\n	border: 1px solid #aac;\n}\n\n.imageLink, #displayArea .imageLink {\n	background: transparent;\n}\n\n/*}}}*/\n/***\n''The viewer is where the tiddler content is displayed'' /%------------------------------------------------%/\n***/\n/*{{{*/\n\n.viewer .listTitle {list-style-type: none; margin-left: -2em;}\n\n.viewer .button {\n	border: 1px solid #db4;\n}\n\n.viewer blockquote {\n	border-left: 3px solid #666;\n}\n\n.viewer table {\n	border: 2px solid #333;\n}\n\n.viewer th, thead td {\n	background: #996;\n	border: 1px solid #666;\n	color: #fff;\n}\n\n.viewer td, .viewer tr {\n	border: 1px solid #666;\n}\n\n.viewer pre {\n	border: 1px solid #fe8;\n	background: #ffc;\n}\n\n.viewer code {\n	color: #703;\n}\n\n.viewer hr {\n	border: 0;\n	border-top: dashed 1px #666;\n	color: #666;\n}\n\n.highlight, .marked {\n	background: #fe8;\n}\n/*}}}*/\n/***\n''The editor replaces the viewer in the tiddler'' /%------------------------------------------------%/\n***/\n/*{{{*/\n.editor input {\n	border: 1px solid #04b;\n}\n\n.editor textarea {\n	border: 1px solid #04b;\n	width: 100%;\n}\n\n.editorFooter {\n	color: #aaa;\n}\n\n/*}}}*/",
	StyleSheetLayout: "/***\n!Sections in this Tiddler:\n*Generic rules\n**Links styles\n**Link Exceptions\n*Header\n*Main menu\n*Sidebar\n**Sidebar options\n**Sidebar tabs\n*Message area\n*Popup\n*Tabs\n*Tiddler display\n**Viewer\n**Editor\n*Misc. rules\n!Generic Rules /%==============================================%/\n***/\n/*{{{*/\nbody {\n	font-size: .75em;\n	font-family: arial,helvetica;\n	position: relative;\n	margin: 0;\n	padding: 0;\n}\n\nh1,h2,h3,h4,h5 {\n	font-weight: bold;\n	text-decoration: none;\n	padding-left: 0.4em;\n}\n\nh1 {font-size: 1.35em;}\nh2 {font-size: 1.25em;}\nh3 {font-size: 1.1em;}\nh4 {font-size: 1em;}\nh5 {font-size: .9em;}\n\nhr {\n	height: 1px;\n}\n\na{\n	text-decoration: none;\n}\n\nol { list-style-type: decimal }\nol ol { list-style-type: lower-alpha }\nol ol ol { list-style-type: lower-roman }\nol ol ol ol { list-style-type: decimal }\nol ol ol ol ol { list-style-type: lower-alpha }\nol ol ol ol ol ol { list-style-type: lower-roman }\nol ol ol ol ol ol ol { list-style-type: decimal }\n/*}}}*/\n/***\n''General Link Styles'' /%-----------------------------------------------------------------------------%/\n***/\n/*{{{*/\n.externalLink {\n	text-decoration: underline;\n}\n\n.tiddlyLinkExisting {\n	font-weight: bold;\n}\n\n.tiddlyLinkNonExisting {\n	font-style: italic;\n}\n\n/* the 'a' is required for IE, otherwise it renders the whole tiddler a bold */\na.tiddlyLinkNonExisting.shadow {\n	font-weight: bold;\n}\n/*}}}*/\n/***\n''Exceptions to common link styles'' /%------------------------------------------------------------------%/\n***/\n/*{{{*/\n\n#mainMenu .tiddlyLinkExisting, \n#mainMenu .tiddlyLinkNonExisting,\n#sidebarTabs .tiddlyLinkExisting,\n#sidebarTabs .tiddlyLinkNonExisting,\n#siteTitle .tiddlyLinkExisting,\n#siteTitle .tiddlyLinkNonExisting{\n font-weight: normal;\n font-style: normal;\n}\n\n/*}}}*/\n/***\n!Header /%==================================================%/\n***/\n/*{{{*/\n\n.header {\n    position: relative;\n}\n\n.header a:hover {\n	background: transparent;\n}\n\n.headerShadow {\n	position: relative;\n	padding: 4.5em 0em 1em 1em;\n	left: -1px;\n	top: -1px;\n}\n\n.headerForeground {\n	position: absolute;\n	padding: 4.5em 0em 1em 1em;\n	left: 0px;\n	top: 0px;\n}\n\n.siteTitle {\n	font-size: 3em;\n}\n\n.siteSubtitle {\n	font-size: 1.2em;\n}\n\n/*}}}*/\n/***\n!Main menu /%==================================================%/\n***/\n/*{{{*/\n#mainMenu {\n	position: absolute;\n	left: 0;\n	width: 10em;\n	text-align: right;\n	line-height: 1.6em;\n	padding: 1.5em 0.5em 0.5em 0.5em;\n	font-size: 1.1em;\n}\n\n/*}}}*/\n/***\n!Sidebar rules /%==================================================%/\n***/\n/*{{{*/\n#sidebar {\n	position: absolute;\n	right: 3px;\n	width: 16em;\n	font-size: .9em;\n}\n/*}}}*/\n/***\n''Sidebar options'' /%----------------------------------------------------------------------------------%/\n***/\n/*{{{*/\n#sidebarOptions {\n	padding-top: 0.3em;\n}\n\n#sidebarOptions a {\n	margin: 0em 0.2em;\n	padding: 0.2em 0.3em;\n	display: block;\n}\n\n#sidebarOptions input {\n	margin: 0.4em 0.5em;\n}\n\n#sidebarOptions .sliderPanel {\n	margin-left: 1em;\n	padding: 0.5em;\n	font-size: .85em;\n}\n\n#sidebarOptions .sliderPanel a {\n	font-weight: bold;\n	display: inline;\n	padding: 0;\n}\n\n#sidebarOptions .sliderPanel input {\n	margin: 0 0 .3em 0;\n}\n/*}}}*/\n/***\n''Sidebar tabs'' /%-------------------------------------------------------------------------------------%/\n***/\n/*{{{*/\n\n#sidebarTabs .tabContents {\n	width: 15em;\n	overflow: hidden;\n}\n\n/*}}}*/\n/***\n!Message area /%==================================================%/\n***/\n/*{{{*/\n#messageArea {\n	padding: 0.5em;\n}\n\n.messageToolbar {\ndisplay: block;\ntext-align: right;\n}\n\n#messageArea a{\n	text-decoration: underline;\n}\n/*}}}*/\n/***\n!Popup /%==================================================%/\n***/\n/*{{{*/\n.popup {\n	font-size: .9em;\n	padding: 0.2em;\n	list-style: none;\n	margin: 0;\n}\n\n.popup hr {\n	display: block;\n	height: 1px;\n	width: auto;\n	padding: 0;\n	margin: 0.2em 0em;\n}\n\n.popup li.disabled {\n	padding: 0.2em;\n}\n\n.popup li a{\n	display: block;\n	padding: 0.2em;\n}\n/*}}}*/\n/***\n!Tabs /%==================================================%/\n***/\n/*{{{*/\n.tabset {\n	padding: 1em 0em 0em 0.5em;\n}\n\n.tab {\n	margin: 0em 0em 0em 0.25em;\n	padding: 2px;\n}\n\n.tabContents {\n	padding: 0.5em;\n}\n\n.tabContents ul, .tabContents ol {\n	margin: 0;\n	padding: 0;\n}\n\n.tabContents li {\n	list-style: none;\n}\n\n.tabContents li.listLink {\n   margin-left: .75em;\n}\n/*}}}*/\n/***\n!Tiddler display rules /%==================================================%/\n***/\n/*{{{*/\n#displayArea {\n	margin: 1em 17em 0em 14em;\n}\n\n\n.toolbar {\n	text-align: right;\n	font-size: .9em;\n	visibility: hidden;\n}\n\n.selected .toolbar {\n	visibility: visible;\n}\n\n.tiddler {\n	padding: 1em 1em 0em 1em;\n}\n\n.missing .viewer,.missing .title {\n	font-style: italic;\n}\n\n.title {\n	font-size: 1.6em;\n	font-weight: bold;\n}\n\n.missing .subtitle {\n display: none;\n}\n\n.subtitle {\n	font-size: 1.1em;\n}\n\n/* I'm not a fan of how button looks in tiddlers... */\n.tiddler .button {\n	padding: 0.2em 0.4em;\n}\n\n.tagging {\nmargin: 0.5em 0.5em 0.5em 0;\nfloat: left;\ndisplay: none;\n}\n\n.isTag .tagging {\ndisplay: block;\n}\n\n.tagged {\nmargin: 0.5em;\nfloat: right;\n}\n\n.tagging, .tagged {\nfont-size: 0.9em;\npadding: 0.25em;\n}\n\n.tagging ul, .tagged ul {\nlist-style: none;margin: 0.25em;\npadding: 0;\n}\n\n.tagClear {\nclear: both;\n}\n\n.footer {\n	font-size: .9em;\n}\n\n.footer li {\ndisplay: inline;\n}\n/***\n''The viewer is where the tiddler content is displayed'' /%------------------------------------------------%/\n***/\n/*{{{*/\n.viewer {\n	line-height: 1.4em;\n	padding-top: 0.5em;\n}\n\n.viewer .button {\n	margin: 0em 0.25em;\n	padding: 0em 0.25em;\n}\n\n.viewer blockquote {\n	line-height: 1.5em;\n	padding-left: 0.8em;\n	margin-left: 2.5em;\n}\n\n.viewer ul, .viewer ol{\n	margin-left: 0.5em;\n	padding-left: 1.5em;\n}\n\n.viewer table {\n	border-collapse: collapse;\n	margin: 0.8em 1.0em;\n}\n\n.viewer th, .viewer td, .viewer tr,.viewer caption{\n	padding: 3px;\n}\n\n.viewer pre {\n	padding: 0.5em;\n	margin-left: 0.5em;\n	font-size: 1.2em;\n	line-height: 1.4em;\n	overflow: auto;\n}\n\n.viewer code {\n	font-size: 1.2em;\n	line-height: 1.4em;\n}\n/*}}}*/\n/***\n''The editor replaces the viewer in the tiddler'' /%------------------------------------------------%/\n***/\n/*{{{*/\n.editor {\nfont-size: 1.1em;\n}\n\n.editor input, .editor textarea {\n	display: block;\n	width: 100%;\n	font: inherit;\n}\n\n.editorFooter {\n	padding: 0.25em 0em;\n	font-size: .9em;\n}\n\n.editorFooter .button {\npadding-top: 0px; padding-bottom: 0px;}\n\n.fieldsetFix {border: 0;\npadding: 0;\nmargin: 1px 0px 1px 0px;\n}\n/*}}}*/\n/***\n!Misc rules /%==================================================%/\n***/\n/*{{{*/\n.sparkline {\n	line-height: 1em;\n}\n\n.sparktick {\n	outline: 0;\n}\n\n.zoomer {\n	font-size: 1.1em;\n	position: absolute;\n	padding: 1em;\n}\n\n.cascade {\n	font-size: 1.1em;\n	position: absolute;\n	overflow: hidden;\n}\n/*}}}*/",
	StyleSheetPrint: "@media print {\n#mainMenu, #sidebar, #messageArea {display: none ! important;}\n#displayArea {margin: 1em 1em 0em 1em;}\n}",
	PageTemplate: "<div class='header' macro='gradient vert #18f #04b'>\n<div class='headerShadow'>\n<span class='siteTitle' refresh='content' tiddler='SiteTitle'></span>&nbsp;\n<span class='siteSubtitle' refresh='content' tiddler='SiteSubtitle'></span>\n</div>\n<div class='headerForeground'>\n<span class='siteTitle' refresh='content' tiddler='SiteTitle'></span>&nbsp;\n<span class='siteSubtitle' refresh='content' tiddler='SiteSubtitle'></span>\n</div>\n</div>\n<div id='mainMenu' refresh='content' tiddler='MainMenu'></div>\n<div id='sidebar'>\n<div id='sidebarOptions' refresh='content' tiddler='SideBarOptions'></div>\n<div id='sidebarTabs' refresh='content' force='true' tiddler='SideBarTabs'></div>\n</div>\n<div id='displayArea'>\n<div id='messageArea'></div>\n<div id='tiddlerDisplay'></div>\n</div>",
	ViewTemplate: "<div class='toolbar' macro='toolbar -closeTiddler closeOthers +editTiddler permalink references jump'></div>\n<div class='title' macro='view title'></div>\n<div class='subtitle'><span macro='view modifier link'></span>, <span macro='view modified date [[DD MMM YYYY]]'></span> (created <span macro='view created date [[DD MMM YYYY]]'></span>)</div>\n<div class='tagging' macro='tagging'></div>\n<div class='tagged' macro='tags'></div>\n<div class='viewer' macro='view text wikified'></div>\n<div class='tagClear'></div>",
	EditTemplate: "<div class='toolbar' macro='toolbar +saveTiddler -cancelTiddler deleteTiddler'></div>\n<div class='title' macro='view title'></div>\n<div class='editor' macro='edit title'></div>\n<div class='editor' macro='edit text'></div>\n<div class='editor' macro='edit tags'></div><div class='editorFooter'><span macro='message views.editor.tagPrompt'></span><span macro='tagChooser'></span></div>"
	};

// ---------------------------------------------------------------------------------
// Main
// ---------------------------------------------------------------------------------

var store = null; // TiddlyWiki storage
var story = null; // Main story
var formatter = null; // Default formatters for the wikifier
var anim = new Animator(); // Animation engine
var readOnly = false; // Whether we're in readonly mode
var highlightHack = null; // Embarrassing hack department...

// Starting up
function main()
{
	store = new TiddlyWiki();
	story = new Story("tiddlerDisplay","tiddler");
	addEvent(document,"click",Popup.onDocumentClick);
	saveTest();
	loadOptionsCookie();
	for(var s=0; s<config.notifyTiddlers.length; s++)
		store.addNotification(config.notifyTiddlers[s].name,config.notifyTiddlers[s].notify);
	store.loadFromDiv("storeArea","store");
	loadSystemConfig();
	formatter = new Formatter(config.formatters);
	readOnly = (document.location.toString().substr(0,7) == "http://") ? config.options.chkHttpReadOnly : false;
	store.notifyAll();
	restart();
}

// Restarting
function restart()
{
	var start = store.getTiddlerText("DefaultTiddlers");
	if(window.location.hash)
		story.displayTiddlers(null,convertUTF8ToUnicode(decodeURI(window.location.hash.substr(1))).readBracketedList());
	else if(start)
		story.displayTiddlers(null,start.readBracketedList());
}

function saveTest()
{
	var saveTest = document.getElementById("saveTest");
	if(saveTest.hasChildNodes())
		alert(config.messages.savedSnapshotError);
	saveTest.appendChild(document.createTextNode("savetest"));
}

function loadSystemConfig()
{
	var configTiddlers = store.getTaggedTiddlers("systemConfig");
	for(var t=0; t<configTiddlers.length; t++)
		{
		var ex = processConfig(configTiddlers[t].text);
		if(ex)
			displayMessage(config.messages.customConfigError.format([ex,configTiddlers[t].title]));
		}
}

// Merge a custom configuration over the top of the current configuration
// Returns a string error message or null if it went OK
function processConfig(customConfig)
{
	try
		{
		if(customConfig && customConfig != "")
			window.eval(customConfig);
		}
	catch(e)
		{
		return(e.description ? e.description : e.toString());
		}
	return null;
}

function invokeMacro(place,macro,params,wikifier,tiddler)
{
	try
		{
		var m = config.macros[macro];
		if(m && m.handler)
			m.handler(place,macro,params.readMacroParams(),wikifier,params,tiddler);
		else
			createTiddlyError(place,config.messages.macroError.format([macro]),config.messages.macroErrorDetails.format([macro,config.messages.missingMacro]));
		}
	catch(ex)
		{
		createTiddlyError(place,config.messages.macroError.format([macro]),config.messages.macroErrorDetails.format([macro,ex.toString()]));
		}
}

// ---------------------------------------------------------------------------------
// Formatters
// ---------------------------------------------------------------------------------

function Formatter(formatters)
{
	this.formatters = [];
	var pattern = [];
	for(var n=0; n<formatters.length; n++)
		{
		pattern.push("(" + formatters[n].match + ")");
		this.formatters.push(formatters[n]);
		}
	this.formatterRegExp = new RegExp(pattern.join("|"),"mg");
}

config.formatterHelpers = {

	charFormatHelper: function(w)
	{
		var e = createTiddlyElement(w.output,this.element);
		w.subWikify(e,this.terminator);
	},
	
	inlineCssHelper:  function(w)
	{
		var styles = [];
		var lookahead = "(?:(" + config.textPrimitives.anyLetter + "+)\\(([^\\)\\|\\n]+)(?:\\):))|(?:(" + config.textPrimitives.anyLetter + "+):([^;\\|\\n]+);)";
		var lookaheadRegExp = new RegExp(lookahead,"mg");
		var hadStyle = false;
		do {
			lookaheadRegExp.lastIndex = w.nextMatch;
			var lookaheadMatch = lookaheadRegExp.exec(w.source);
			var gotMatch = lookaheadMatch && lookaheadMatch.index == w.nextMatch;
			if(gotMatch)
				{
				var s,v;
				hadStyle = true;
				if(lookaheadMatch[1])
					{
					s = lookaheadMatch[1].unDash();
					v = lookaheadMatch[2];
					}
				else
					{
					s = lookaheadMatch[3].unDash();
					v = lookaheadMatch[4];
					}
				switch(s)
					{
					case "bgcolor": s = "backgroundColor"; break;
					}
				styles.push({style: s, value: v});
				w.nextMatch = lookaheadMatch.index + lookaheadMatch[0].length;
				}
		} while(gotMatch);
		return styles;
	},

	monospacedByLineHelper: function(w)
	{
		var lookaheadRegExp = new RegExp(this.lookahead,"mg");
		lookaheadRegExp.lastIndex = w.matchStart;
		var lookaheadMatch = lookaheadRegExp.exec(w.source);
		if(lookaheadMatch && lookaheadMatch.index == w.matchStart)
			{
			var text = lookaheadMatch[1];
			if(config.browser.isIE)
				text = text.replace(/\n/g,"\r");
			var e = createTiddlyElement(w.output,"pre",null,null,text);
			w.nextMatch = lookaheadMatch.index + lookaheadMatch[0].length;
			}
	}

};

config.formatters = [
{
	name: "table",
	match: "^\\|(?:[^\\n]*)\\|(?:[fhc]?)$",
	lookahead: "^\\|([^\\n]*)\\|([fhc]?)$",
	rowTerminator: "\\|(?:[fhc]?)$\\n?",
	cellPattern: "(?:\\|([^\\n\\|]*)\\|)|(\\|[fhc]?$\\n?)",
	cellTerminator: "(?:\\x20*)\\|",
	rowTypes: {"c": "caption", "h": "thead", "": "tbody", "f": "tfoot"},
	handler: function(w)
	{
		var table = createTiddlyElement(w.output,"table");
		w.nextMatch = w.matchStart;
		var lookaheadRegExp = new RegExp(this.lookahead,"mg");
		var currRowType = null, nextRowType;
		var rowContainer, rowElement;
		var prevColumns = [];
		var rowCount = 0;
		do {
			lookaheadRegExp.lastIndex = w.nextMatch;
			var lookaheadMatch = lookaheadRegExp.exec(w.source);
			var matched = lookaheadMatch && lookaheadMatch.index == w.nextMatch;
			if(matched)
				{
				nextRowType = lookaheadMatch[2];
				if(nextRowType != currRowType)
					rowContainer = createTiddlyElement(table,this.rowTypes[nextRowType]);
				currRowType = nextRowType;
				if(currRowType == "c")
					{
					if(rowCount == 0)
						rowContainer.setAttribute("align","top");
					else
						rowContainer.setAttribute("align","bottom");
					w.nextMatch = w.nextMatch + 1;
					w.subWikify(rowContainer,this.rowTerminator);
					table.insertBefore(rowContainer,table.firstChild);
					}
				else
					{
					var rowClass = (rowCount & 1) ? "oddRow" : "evenRow";
					rowElement = createTiddlyElement(rowContainer,"tr",null,rowClass);
					this.rowHandler(w,rowElement,prevColumns);
					}
				rowCount++;
				}
		} while(matched);
	},
	rowHandler: function(w,e,prevColumns)
	{
		var col = 0;
		var currColCount = 1;
		var cellRegExp = new RegExp(this.cellPattern,"mg");
		do {
			cellRegExp.lastIndex = w.nextMatch;
			var cellMatch = cellRegExp.exec(w.source);
			matched = cellMatch && cellMatch.index == w.nextMatch;
			if(matched)
				{
				if(cellMatch[1] == "~")
					{
					var last = prevColumns[col];
					if(last)
						{
						last.rowCount++;
						last.element.setAttribute("rowSpan",last.rowCount);
						last.element.setAttribute("rowspan",last.rowCount);
						last.element.valign = "center";
						}
					w.nextMatch = cellMatch.index + cellMatch[0].length-1;
					}
				else if(cellMatch[1] == ">")
					{
					currColCount++;
					w.nextMatch = cellMatch.index + cellMatch[0].length-1;
					}
				else if(cellMatch[2])
					{
					w.nextMatch = cellMatch.index + cellMatch[0].length;;
					break;
					}
				else
					{
					var spaceLeft = false, spaceRight = false;
					w.nextMatch++;
					var styles = config.formatterHelpers.inlineCssHelper(w);
					while(w.source.substr(w.nextMatch,1) == " ")
						{
						spaceLeft = true;
						w.nextMatch++;
						}
					var cell;
					if(w.source.substr(w.nextMatch,1) == "!")
						{
						cell = createTiddlyElement(e,"th");
						w.nextMatch++;
						}
					else
						cell = createTiddlyElement(e,"td");
					prevColumns[col] = {rowCount: 1, element: cell};
					lastColCount = 1;
					lastColElement = cell;
					if(currColCount > 1)
						{
						cell.setAttribute("colSpan",currColCount);
						cell.setAttribute("colspan",currColCount);
						currColCount = 1;
						}
					for(var t=0; t<styles.length; t++)
						cell.style[styles[t].style] = styles[t].value;
					w.subWikify(cell,this.cellTerminator);
					if(w.matchText.substr(w.matchText.length-2,1) == " ")
						spaceRight = true;
					if(spaceLeft && spaceRight)
						cell.align = "center";
					else if (spaceLeft)
						cell.align = "right";
					else if (spaceRight)
						cell.align = "left";
					w.nextMatch = w.nextMatch-1;
					}
				col++;
				}
		} while(matched);		
	}
},

{
	name: "rule",
	match: "^----$\\n?",
	handler: function(w)
	{
		createTiddlyElement(w.output,"hr");
	}
},

{
	name: "heading",
	match: "^!{1,5}",
	terminator: "\\n",
	handler: function(w)
	{
		var e = createTiddlyElement(w.output,"h" + w.matchLength);
		w.subWikify(e,this.terminator);
	}
},

{
	name: "monospacedByLine",
	match: "^\\{\\{\\{\\n",
	lookahead: "^\\{\\{\\{\\n((?:^[^\\n]*\\n)+?)(^\\}\\}\\}$\\n?)",
	handler: config.formatterHelpers.monospacedByLineHelper
},

{
	name: "monospacedByLineForCSS",
	match: "^/\\*[\\{]{3}\\*/\\n",
	lookahead: "/\\*[\\{]{3}\\*/\\n*((?:^[^\\n]*\\n)+?)(\\n*^/\\*[\\}]{3}\\*/$\\n?)", 
	handler: config.formatterHelpers.monospacedByLineHelper
},

{
	name: "monospacedByLineForPlugin",
	match: "^//\\{\\{\\{\\n",
	lookahead: "^//\\{\\{\\{\\n\\n*((?:^[^\\n]*\\n)+?)(\\n*^//\\}\\}\\}$\\n?)",
	handler: config.formatterHelpers.monospacedByLineHelper
},

{
    name: "monospacedByLineForTemplate",
    match: "^<!--[\\{]{3}-->\\n",
    lookahead: "<!--[\\{]{3}-->\\n*((?:^[^\\n]*\\n)+?)(\\n*^<!--[\\}]{3}-->$\\n?)", 
    handler: config.formatterHelpers.monospacedByLineHelper
},

{
	name: "wikifyCommentForPlugin", 
	match: "^/\\*\\*\\*\\n",
	terminator: "^\\*\\*\\*/\\n",
	handler: function(w)
	{
		w.subWikify(w.output,this.terminator);
	}
},

{
    name: "wikifyCommentForTemplate", 
    match: "^<!---\\n",
    terminator: "^--->\\n",
    handler: function(w) 
    {
        w.subWikify(w.output,this.terminator);
    }
},

{
	name: "quoteByBlock",
	match: "^<<<\\n",
	terminator: "^<<<\\n",
	handler: function(w)
	{
		var e = createTiddlyElement(w.output,"blockquote");
		w.subWikify(e,this.terminator);
	}
},

{
	name: "quoteByLine",
	match: "^>+",
	terminator: "\\n",
	element: "blockquote",
	handler: function(w)
	{
		var lookaheadRegExp = new RegExp(this.match,"mg");
		var placeStack = [w.output];
		var currLevel = 0;
		var newLevel = w.matchLength;
		var t;
		do {
			if(newLevel > currLevel)
				{
				for(t=currLevel; t<newLevel; t++)
					placeStack.push(createTiddlyElement(placeStack[placeStack.length-1],this.element));
				}
			else if(newLevel < currLevel)
				{
				for(t=currLevel; t>newLevel; t--)
					placeStack.pop();
				}
			currLevel = newLevel;
			w.subWikify(placeStack[placeStack.length-1],this.terminator);
			createTiddlyElement(placeStack[placeStack.length-1],"br");
			lookaheadRegExp.lastIndex = w.nextMatch;
			var lookaheadMatch = lookaheadRegExp.exec(w.source);
			var matched = lookaheadMatch && lookaheadMatch.index == w.nextMatch;
			if(matched)
				{
				newLevel = lookaheadMatch[0].length;
				w.nextMatch += lookaheadMatch[0].length;
				}
		} while(matched);
	}
},

{
	name: "list",
	match: "^(?:(?:\\*+)|(?:#+))",
	lookahead: "^(?:(\\*+)|(#+))",
	terminator: "\\n",
	outerElement: "ul",
	itemElement: "li",
	handler: function(w)
	{
		var lookaheadRegExp = new RegExp(this.lookahead,"mg");
		w.nextMatch = w.matchStart;
		var placeStack = [w.output];
		var currType = null, newType;
		var currLevel = 0, newLevel;
		var t;
		do {
			lookaheadRegExp.lastIndex = w.nextMatch;
			var lookaheadMatch = lookaheadRegExp.exec(w.source);
			var matched = lookaheadMatch && lookaheadMatch.index == w.nextMatch;
			if(matched)
				{
				if(lookaheadMatch[1])
					newType = "ul";
				if(lookaheadMatch[2])
					newType = "ol";
				newLevel = lookaheadMatch[0].length;
				w.nextMatch += lookaheadMatch[0].length;
				if(newLevel > currLevel)
					{
					for(t=currLevel; t<newLevel; t++)
						placeStack.push(createTiddlyElement(placeStack[placeStack.length-1],newType));
					}
				else if(newLevel < currLevel)
					{
					for(t=currLevel; t>newLevel; t--)
						placeStack.pop();
					}
				else if(newLevel == currLevel && newType != currType)
					{
						placeStack.pop();
						placeStack.push(createTiddlyElement(placeStack[placeStack.length-1],newType));
					}
				currLevel = newLevel;
				currType = newType;
				var e = createTiddlyElement(placeStack[placeStack.length-1],"li");
				w.subWikify(e,this.terminator);
				}
		} while(matched);
	}
},

{
	name: "wikiLink",
	match: config.textPrimitives.wikiLink,
	badPrefix: config.textPrimitives.anyLetter,
	handler: function(w)
	{
		var preRegExp = new RegExp(config.textPrimitives.anyLetter,"mg");
		var preMatch = null;
		if(w.matchStart > 0)
			{
			preRegExp.lastIndex = w.matchStart-1;
			preMatch = preRegExp.exec(w.source);
			}
		if(preMatch && preMatch.index == w.matchStart-1)
			w.outputText(w.output,w.matchStart,w.nextMatch);
		else if(w.matchText.substr(0,1) == config.textPrimitives.unWikiLink)
			w.outputText(w.output,w.matchStart + 1,w.nextMatch);
		else
			{
			var link = createTiddlyLink(w.output,w.matchText,false);
			w.outputText(link,w.matchStart,w.nextMatch);
			}
	}
},

{
	name: "prettyLink",
	match: "\\[\\[",
	lookahead: "\\[\\[([^\\|\\]]*?)(?:(\\]\\])|(\\|(.*?)\\]\\]))",
	terminator: "\\|",
	handler: function(w)
	{
		var lookaheadRegExp = new RegExp(this.lookahead,"mg");
		lookaheadRegExp.lastIndex = w.matchStart;
		var lookaheadMatch = lookaheadRegExp.exec(w.source)
		if(lookaheadMatch && lookaheadMatch.index == w.matchStart && lookaheadMatch[2]) // Simple bracketted link
			{
			var link = createTiddlyLink(w.output,lookaheadMatch[1],false);
			w.outputText(link,w.nextMatch,w.nextMatch + lookaheadMatch[1].length);
			w.nextMatch += lookaheadMatch[1].length + 2;
			}
		else if(lookaheadMatch && lookaheadMatch.index == w.matchStart && lookaheadMatch[3]) // Pretty bracketted link
			{
			var e;
			if(store.tiddlerExists(lookaheadMatch[4]))
				e = createTiddlyLink(w.output,lookaheadMatch[4],false);
			else
				e = createExternalLink(w.output,lookaheadMatch[4]);
			w.outputText(e,w.nextMatch,w.nextMatch + lookaheadMatch[1].length);
			w.nextMatch = lookaheadMatch.index + lookaheadMatch[0].length;
			}
	}
},

{
	name: "urlLink",
	match: config.textPrimitives.urlPattern,
	handler: function(w)
	{
		var e = createExternalLink(w.output,w.matchText);
		w.outputText(e,w.matchStart,w.nextMatch);
	}
},

{
	name: "image",
	match: "\\[(?:[<]{0,1})(?:[>]{0,1})[Ii][Mm][Gg]\\[",
	lookahead: "\\[([<]{0,1})([>]{0,1})[Ii][Mm][Gg]\\[(?:([^\\|\\]]+)\\|)?([^\\[\\]\\|]+)\\](?:\\[([^\\]]*)\\]?)?(\\])",
	handler: function(w)
	{
		var lookaheadRegExp = new RegExp(this.lookahead,"mg");
		lookaheadRegExp.lastIndex = w.matchStart;
		var lookaheadMatch = lookaheadRegExp.exec(w.source);
		if(lookaheadMatch && lookaheadMatch.index == w.matchStart) // Simple bracketted link
			{
			var e = w.output;
			if(lookaheadMatch[5])
				{
				if(store.tiddlerExists(lookaheadMatch[5]))
					e = createTiddlyLink(w.output,lookaheadMatch[5],false);
				else
					e = createExternalLink(w.output,lookaheadMatch[5]);
				addClass(e,"imageLink");
				}
			var img = createTiddlyElement(e,"img");
			if(lookaheadMatch[1])
				img.align = "left";
			else if(lookaheadMatch[2])
				img.align = "right";
			if(lookaheadMatch[3])
				img.title = lookaheadMatch[3];
			img.src = lookaheadMatch[4];
			w.nextMatch = lookaheadMatch.index + lookaheadMatch[0].length;
			}
	}
},

{
	name: "macro",
	match: "<<",
	lookahead: "<<([^>\\s]+)(?:\\s*)((?:[^>]|(?:>(?!>)))*)>>",
	handler: function(w)
	{
		var lookaheadRegExp = new RegExp(this.lookahead,"mg");
		lookaheadRegExp.lastIndex = w.matchStart;
		var lookaheadMatch = lookaheadRegExp.exec(w.source)
		if(lookaheadMatch && lookaheadMatch.index == w.matchStart && lookaheadMatch[1])
			{		
			w.nextMatch = lookaheadMatch.index + lookaheadMatch[0].length;
			invokeMacro(w.output,lookaheadMatch[1],lookaheadMatch[2],w,w.tiddler);
			}
	}
},

{
	name: "html",
	match: "<[Hh][Tt][Mm][Ll]>",
	lookahead: "<[Hh][Tt][Mm][Ll]>((?:.|\\n)*?)</[Hh][Tt][Mm][Ll]>",
	handler: function(w)
	{
		var lookaheadRegExp = new RegExp(this.lookahead,"mg");
		lookaheadRegExp.lastIndex = w.matchStart;
		var lookaheadMatch = lookaheadRegExp.exec(w.source)
		if(lookaheadMatch && lookaheadMatch.index == w.matchStart)
			{
			var e = createTiddlyElement(w.output,"span");
			e.innerHTML = lookaheadMatch[1];
			w.nextMatch = lookaheadMatch.index + lookaheadMatch[0].length;
			}
	}
},

{
	name: "commentByBlock",
	match: "/%",
	lookahead: "/%((?:.|\\n)*?)%/",
	handler: function(w)
	{
		var lookaheadRegExp = new RegExp(this.lookahead,"mg");
		lookaheadRegExp.lastIndex = w.matchStart;
		var lookaheadMatch = lookaheadRegExp.exec(w.source)
		if(lookaheadMatch && lookaheadMatch.index == w.matchStart)
			w.nextMatch = lookaheadMatch.index + lookaheadMatch[0].length;
	}
},

{
	name: "boldByChar",
	match: "''",
	terminator: "''",
	element: "strong",
	handler: config.formatterHelpers.charFormatHelper
},

{
	name: "strikeByChar",
	match: "==",
	terminator: "==",
	element: "strike",
	handler: config.formatterHelpers.charFormatHelper
},

{
	name: "underlineByChar",
	match: "__",
	terminator: "__",
	element: "u",
	handler: config.formatterHelpers.charFormatHelper
},

{
	name: "italicByChar",
	match: "//",
	terminator: "//",
	element: "em",
	handler: config.formatterHelpers.charFormatHelper
},

{
	name: "subscriptByChar",
	match: "~~",
	terminator: "~~",
	element: "sub",
	handler: config.formatterHelpers.charFormatHelper
},

{
	name: "superscriptByChar",
	match: "\\^\\^",
	terminator: "\\^\\^",
	element: "sup",
	handler: config.formatterHelpers.charFormatHelper
},

{
	name: "monospacedByChar",
	match: "\\{\\{\\{",
	lookahead: "\\{\\{\\{((?:.|\\n)*?)\\}\\}\\}",
	handler: function(w)
	{
		var lookaheadRegExp = new RegExp(this.lookahead,"mg");
		lookaheadRegExp.lastIndex = w.matchStart;
		var lookaheadMatch = lookaheadRegExp.exec(w.source)
		if(lookaheadMatch && lookaheadMatch.index == w.matchStart)
			{
			var e = createTiddlyElement(w.output,"code",null,null,lookaheadMatch[1]);
			w.nextMatch = lookaheadMatch.index + lookaheadMatch[0].length;
			}
	}
},

{
	name: "styleByChar",
	match: "@@",
	terminator: "@@",
	lookahead: "(?:([^\\(@]+)\\(([^\\)]+)(?:\\):))|(?:([^:@]+):([^;]+);)",
	handler:  function(w)
	{
		var e = createTiddlyElement(w.output,"span",null,null,null);
		var styles = config.formatterHelpers.inlineCssHelper(w);
		if(styles.length == 0)
			e.className = "marked";
		else
			for(var t=0; t<styles.length; t++)
				e.style[styles[t].style] = styles[t].value;
		w.subWikify(e,this.terminator);
	}
},

{
	name: "lineBreak",
	match: "\\n",
	handler: function(w)
	{
		createTiddlyElement(w.output,"br");
	}
},

{
	name: "htmlEntitiesEncoding",
	match: "&#?[a-zA-Z0-9]{2,8};",
	handler: function(w)
		{
		var e = createTiddlyElement(w.output,"span");
		e.innerHTML = w.matchText ;
		}
}

];

// ---------------------------------------------------------------------------------
// Wikifier
// ---------------------------------------------------------------------------------

function wikify(source,output,highlightRegExp,tiddler)
{
	if(source && source != "")
		{
		var wikifier = new Wikifier(source,formatter,highlightRegExp,tiddler);
		wikifier.subWikify(output,null);
		}
}

// Wikify a named tiddler to plain text
function wikifyPlain(title)
{
	if(store.tiddlerExists(title))
		{
		var wikifier = new Wikifier(store.getTiddlerText(title),formatter,null,store.getTiddler(title));
		return wikifier.wikifyPlain();
		}
	else
		return "";
}

// Highlight plain text into an element
function highlightify(source,output,highlightRegExp)
{
	if(source && source != "")
		{
		var wikifier = new Wikifier(source,formatter,highlightRegExp,null);
		wikifier.outputText(output,0,source.length);
		}
}

// Construct a wikifier object
// source - source string that's going to be wikified
// formatter - Formatter() object containing the list of formatters to be used
// highlightRegExp - regular expression of the text string to highlight
// tiddler - reference to the tiddler that's taken to be the container for this wikification
function Wikifier(source,formatter,highlightRegExp,tiddler)
{
	this.source = source;
	this.output = null;
	this.formatter = formatter;
	this.nextMatch = 0;
	this.highlightRegExp = highlightRegExp;
	this.highlightMatch = null;	
	if(highlightRegExp)
		{
		highlightRegExp.lastIndex = 0;
		this.highlightMatch = highlightRegExp.exec(source);
		}
	this.tiddler = tiddler;
}

Wikifier.prototype.wikifyPlain = function()
{
	var e = createTiddlyElement(document.body,"div");
	e.style.display = "none";
	this.subWikify(e,null);
	var text = getPlainText(e);
	e.parentNode.removeChild(e);
	return text;
}

Wikifier.prototype.subWikify = function(output,terminator)
{
	// Temporarily replace the output pointer
	var oldOutput = this.output;
	this.output = output;
	// Prepare the terminator RegExp
	var terminatorRegExp = terminator ? new RegExp("(" + terminator + ")","mg") : null;
	do {
		// Prepare the RegExp match positions
		this.formatter.formatterRegExp.lastIndex = this.nextMatch;
		if(terminatorRegExp)
			terminatorRegExp.lastIndex = this.nextMatch;
		// Get the first matches
		var formatterMatch = this.formatter.formatterRegExp.exec(this.source);
		var terminatorMatch = terminatorRegExp ? terminatorRegExp.exec(this.source) : null;
		// Check for a terminator match
		if(terminatorMatch && (!formatterMatch || terminatorMatch.index <= formatterMatch.index))
			{
			// Output any text before the match
			if(terminatorMatch.index > this.nextMatch)
				this.outputText(this.output,this.nextMatch,terminatorMatch.index);
			// Set the match parameters
			this.matchStart = terminatorMatch.index;
			this.matchLength = terminatorMatch[1].length;
			this.matchText = terminatorMatch[1];
			this.nextMatch = terminatorMatch.index + terminatorMatch[1].length;
			// Restore the output pointer and exit
			this.output = oldOutput;
			return;		
			}
		// Check for a formatter match
		else if(formatterMatch)
			{
			// Output any text before the match
			if(formatterMatch.index > this.nextMatch)
				this.outputText(this.output,this.nextMatch,formatterMatch.index);
			// Set the match parameters
			this.matchStart = formatterMatch.index;
			this.matchLength = formatterMatch[0].length;
			this.matchText = formatterMatch[0];
			this.nextMatch = this.formatter.formatterRegExp.lastIndex;
			// Figure out which formatter matched
			var matchingformatter = -1;
			for(var t=1; t<formatterMatch.length; t++)
				if(formatterMatch[t])
					matchingFormatter = t-1;
			// Call the formatter
			if(matchingFormatter != -1)
				this.formatter.formatters[matchingFormatter].handler(this);
			}
	} while(terminatorMatch || formatterMatch);
	// Output any text after the last match
	if(this.nextMatch < this.source.length)
		{
		this.outputText(this.output,this.nextMatch,this.source.length);
		this.nextMatch = this.source.length;
		}
	// Restore the output pointer
	this.output = oldOutput;
}

Wikifier.prototype.outputText = function(place,startPos,endPos)
{
	// Check for highlights
	while(this.highlightMatch && (this.highlightRegExp.lastIndex > startPos) && (this.highlightMatch.index < endPos) && (startPos < endPos))
		{
		// Deal with any plain text before the highlight
		if(this.highlightMatch.index > startPos)
			{
			createTiddlyText(place,this.source.substring(startPos,this.highlightMatch.index));
			startPos = this.highlightMatch.index;
			}
		// Deal with the highlight
		var highlightEnd = Math.min(this.highlightRegExp.lastIndex,endPos);
		var theHighlight = createTiddlyElement(place,"span",null,"highlight",this.source.substring(startPos,highlightEnd));
		startPos = highlightEnd;
		// Nudge along to the next highlight if we're done with this one
		if(startPos >= this.highlightRegExp.lastIndex)
			this.highlightMatch = this.highlightRegExp.exec(this.source);
		}
	// Do the unhighlighted text left over
	if(startPos < endPos)
		{
		createTiddlyText(place,this.source.substring(startPos,endPos));
		}
}

// ---------------------------------------------------------------------------------
// Macro definitions
// ---------------------------------------------------------------------------------

config.macros.today.handler = function(place,macroName,params)
{
	var now = new Date();
	var text;
	if(params[0])
		text = now.formatString(params[0].trim());
	else
		text = now.toLocaleString();
	createTiddlyElement(place,"span",null,null,text);
}

config.macros.version.handler = function(place)
{
	createTiddlyElement(place,"span",null,null,version.major + "." + version.minor + "." + version.revision + (version.beta ? " (beta " + version.beta + ")" : ""));
}

config.macros.list.handler = function(place,macroName,params)
{
	var type = params[0] ? params[0] : "all";
	var theList = document.createElement("ul");
	place.appendChild(theList);
	if(this[type].prompt)
		createTiddlyElement(theList,"li",null,"listTitle",this[type].prompt);
	var results;
	if(this[type].handler)
		results = this[type].handler(params);
	for (t = 0; t < results.length; t++)
		{
		theListItem = document.createElement("li")
		theList.appendChild(theListItem);
		if(typeof results[t] == "string")
			createTiddlyLink(theListItem,results[t],true);
		else
			createTiddlyLink(theListItem,results[t].title,true);
		}
}

config.macros.list.all.handler = function(params)
{
	return store.reverseLookup("tags","excludeLists",false,"title");
}

config.macros.list.missing.handler = function(params)
{
	return store.getMissingLinks();
}

config.macros.list.orphans.handler = function(params)
{
	return store.getOrphans();
}

config.macros.list.shadowed.handler = function(params)
{
	return store.getShadowed();
}

config.macros.allTags.handler = function(place,macroName,params)
{
	var tags = store.getTags();
	var theDateList = createTiddlyElement(place,"ul",null,null,null);
	if(tags.length == 0)
		createTiddlyElement(theDateList,"li",null,"listTitle",this.noTags);
	for (t=0; t<tags.length; t++)
		{
		var theListItem =createTiddlyElement(theDateList,"li",null,null,null);
		var theTag = createTiddlyButton(theListItem,tags[t][0] + " (" + tags[t][1] + ")",this.tooltip.format([tags[t][0]]),onClickTag);
		theTag.setAttribute("tag",tags[t][0]);
		}
}

config.macros.timeline.handler = function(place,macroName,params)
{
	var field = params[0] ? params[0] : "modified";
	var tiddlers = store.reverseLookup("tags","excludeLists",false,field);
	var lastDay = "";
	for (t=tiddlers.length-1; t>=0; t--)
		{
		var tiddler = tiddlers[t];
		var theDay = tiddler[field].convertToYYYYMMDDHHMM().substr(0,8);
		if(theDay != lastDay)
			{
			var theDateList = document.createElement("ul");
			place.appendChild(theDateList);
			createTiddlyElement(theDateList,"li",null,"listTitle",tiddler[field].formatString(this.dateFormat));
			lastDay = theDay;
			}
		var theDateListItem = createTiddlyElement(theDateList,"li",null,"listLink",null);
		theDateListItem.appendChild(createTiddlyLink(place,tiddler.title,true));
		}
}

config.macros.search.handler = function(place,macroName,params)
{
	var lastSearchText = "";
	var searchTimeout = null;
	var doSearch = function(txt)
		{
		story.search(txt.value,config.options.chkCaseSensitiveSearch,config.options.chkRegExpSearch);
		lastSearchText = txt.value;
		};
	var clickHandler = function(e)
		{
		doSearch(this.nextSibling);
		return false;
		};
	var keyHandler = function(e)
		{
		if (!e) var e = window.event;
		switch(e.keyCode)
			{
			case 27:
				this.value = "";
				clearMessage();
				break;
			}
		if((this.value.length > 2) && (this.value != lastSearchText))
			{
			if(searchTimeout)
				clearTimeout(searchTimeout);
			var txt = this;
			searchTimeout = setTimeout(function() {doSearch(txt);},500);
			}
		};
	var focusHandler = function(e)
		{
		this.select();
		};
	var btn = createTiddlyButton(place,this.label,this.prompt,clickHandler);
	var txt = createTiddlyElement(place,"input",null,null,null);
	if(params[0])
		txt.value = params[0];
	txt.onkeyup = keyHandler;
	txt.onfocus = focusHandler;
	txt.setAttribute("size",this.sizeTextbox);
	txt.setAttribute("accessKey",this.accessKey);
	txt.setAttribute("autocomplete","off");
	if(config.browser.isSafari)
		{
		txt.setAttribute("type","search");
		txt.setAttribute("results","5");
		}
	else
		txt.setAttribute("type","text");
}

config.macros.tiddler.handler = function(place,macroName,params)
{
	var wrapper = createTiddlyElement(place,"span",null,params[1] ? params[1] : null,null);
	var text = store.getTiddlerText(params[0]);
	if(text)
		wikify(text,wrapper,null,store.getTiddler(params[0]));
}

config.macros.tag.handler = function(place,macroName,params)
{
	createTagButton(place,params[0]);
}

config.macros.tags.handler = function(place,macroName,params,wikifier,paramString,tiddler)
{
	var theList = createTiddlyElement(place,"ul");
	if(params[0] && store.tiddlerExists[params[0]])
		tiddler = store.getTiddler(params[0]);
	var lingo = config.views.wikified.tag;
	var prompt = tiddler.tags.length == 0 ? lingo.labelNoTags : lingo.labelTags;
	createTiddlyElement(theList,"li",null,"listTitle",prompt.format([tiddler.title]));
	for(var t=0; t<tiddler.tags.length; t++)
		createTagButton(createTiddlyElement(theList,"li"),tiddler.tags[t],tiddler.title);
}

config.macros.tagging.handler = function(place,macroName,params,wikifier,paramString,tiddler)
{
	var theList = createTiddlyElement(place,"ul");
	if(params[0] && store.tiddlerExists(params[0]))
		tiddler = store.getTiddler(params[0]);
	theList.setAttribute("title",this.tooltip.format([tiddler.title]));
	var tagged = store.getTaggedTiddlers(tiddler.title);
	var prompt = tagged.length == 0 ? this.labelNotTag : this.label;
	createTiddlyElement(theList,"li",null,"listTitle",prompt.format([tiddler.title]));
	for(var t=0; t<tagged.length; t++)
		createTiddlyLink(createTiddlyElement(theList,"li"),tagged[t].title,true);
}

config.macros.closeAll.handler = function(place)
{
	createTiddlyButton(place,this.label,this.prompt,function () {story.closeAllTiddlers(); return false;});
}

config.macros.permaview.handler = function(place)
{
	createTiddlyButton(place,this.label,this.prompt,function () {story.permaView(); return false;});
}

config.macros.saveChanges.handler = function(place)
{
	if(!readOnly)
		createTiddlyButton(place,this.label,this.prompt,function () {saveChanges(); return false;},null,null,this.accessKey);
}

config.macros.slider.onClickSlider = function(e)
{
	if (!e) var e = window.event;
	var n = this.nextSibling;
	var cookie = n.getAttribute("cookie");
	var isOpen = n.style.display != "none";
	if(config.options.chkAnimate)
		anim.startAnimating(new Slider(n,!isOpen,e.shiftKey || e.altKey,"none"));
	else
		n.style.display = isOpen ? "none" : "block";
	config.options[cookie] = !isOpen;
	saveOptionCookie(cookie);
	return false;
}

config.macros.slider.createSlider = function(place,cookie,title,tooltip)
{
	var cookie = cookie ? cookie : "";
	var btn = createTiddlyButton(place,title,tooltip,this.onClickSlider);
	var panel = createTiddlyElement(place,"div",null,"sliderPanel",null);
	panel.setAttribute("cookie",cookie);
	panel.style.display = config.options[cookie] ? "block" : "none";
	return panel;
}

config.macros.slider.handler = function(place,macroName,params)
{
	var panel = this.createSlider(place,params[0],params[2],params[3]);
	var text = store.getTiddlerText(params[1]);
	if(text)
		wikify(text,panel,null,store.getTiddler(params[1]));
}

config.macros.option.onChangeOption = function(e)
{
	var opt = this.getAttribute("option");
	var elementType,valueField;
	if(opt)
		{
		switch(opt.substr(0,3))
			{
			case "txt":
				elementType = "input";
				valueField = "value";
				break;
			case "chk":
				elementType = "input";
				valueField = "checked";
				break;
			}
		config.options[opt] = this[valueField];
		saveOptionCookie(opt);
		var nodes = document.getElementsByTagName(elementType);
		for(var t=0; t<nodes.length; t++)
			{
			var optNode = nodes[t].getAttribute("option");
			if(opt == optNode)
				nodes[t][valueField] = this[valueField];
			}
		}
	return(true);
}

config.macros.option.handler = function(place,macroName,params)
{
	var opt = params[0];
	if(config.options[opt] == undefined)
		return;
	var c;
	switch(opt.substr(0,3))
		{
		case "txt":
			c = document.createElement("input");
			c.onkeyup = this.onChangeOption;
			c.setAttribute("option",opt);
			c.size = 15;
			place.appendChild(c);
			c.value = config.options[opt];
			break;
		case "chk":
			c = document.createElement("input");
			c.setAttribute("type","checkbox");
			c.onclick = this.onChangeOption;
			c.setAttribute("option",opt);
			place.appendChild(c);
			c.checked = config.options[opt];
			break;
		}
}

config.macros.newTiddler.onClick = function()
{
	story.displayTiddler(null,config.macros.newTiddler.title,DEFAULT_EDIT_TEMPLATE);
	story.focusTiddler(config.macros.newTiddler.title,"title");
	return false;
}

config.macros.newTiddler.handler = function(place)
{
	if(!readOnly)
		createTiddlyButton(place,this.label,this.prompt,this.onClick,null,null,this.accessKey);
}

config.macros.newJournal.handler = function(place,macroName,params)
{
	if(!readOnly)
		{
		var now = new Date();
		var title = now.formatString(params[0].trim());
		var createJournal = function() {
			story.displayTiddler(null,title,DEFAULT_EDIT_TEMPLATE);
			for(var t=1;t<params.length;t++)
				story.setTiddlerTag(title,params[t],+1);
			story.focusTiddler(title,"text");
			return false;
			};
		createTiddlyButton(place,this.label,this.prompt,createJournal,null,null,this.accessKey);
		}
}

config.macros.sparkline.handler = function(place,macroName,params)
{
	var data = [];
	var min = 0;
	var max = 0;
	for(var t=0; t<params.length; t++)
		{
		var v = parseInt(params[t]);
		if(v < min)
			min = v;
		if(v > max)
			max = v;
		data.push(v);
		}
	if(data.length < 1)
		return;
	var box = createTiddlyElement(place,"span",null,"sparkline",String.fromCharCode(160));
	box.title = data.join(",");
	var w = box.offsetWidth;
	var h = box.offsetHeight;
	box.style.paddingRight = (data.length * 2 - w) + "px";
	box.style.position = "relative";
	for(var d=0; d<data.length; d++)
		{
		var tick = document.createElement("img");
		tick.border = 0;
		tick.className = "sparktick";
		tick.style.position = "absolute";
		tick.src = "data:image/gif,GIF89a%01%00%01%00%91%FF%00%FF%FF%FF%00%00%00%C0%C0%C0%00%00%00!%F9%04%01%00%00%02%00%2C%00%00%00%00%01%00%01%00%40%02%02T%01%00%3B";
		tick.style.left = d*2 + "px";
		tick.style.width = "2px";
		var v = Math.floor(((data[d] - min)/(max-min)) * h);
		tick.style.top = (h-v) + "px";
		tick.style.height = v + "px";
		box.appendChild(tick);
		}
}

config.macros.tabs.handler = function(place,macroName,params)
{
	var cookie = params[0];
	var numTabs = (params.length-1)/3;
	var wrapper = createTiddlyElement(place,"div",null,cookie,null);
	var tabset = createTiddlyElement(wrapper,"div",null,"tabset",null);
	tabset.setAttribute("cookie",cookie);
	var validTab = false;
	for(var t=0; t<numTabs; t++)
		{
		var label = params[t*3+1];
		var prompt = params[t*3+2];
		var content = params[t*3+3];
		var tab = createTiddlyButton(tabset,label,prompt,this.onClickTab,"tab tabUnselected");
		tab.setAttribute("tab",label);
		tab.setAttribute("content",content);
		tab.title = prompt;
		if(config.options[cookie] == label)
			validTab = true;
		}
	if(!validTab)
		config.options[cookie] = params[1];
	this.switchTab(tabset,config.options[cookie]);
}

config.macros.tabs.onClickTab = function(e)
{
	config.macros.tabs.switchTab(this.parentNode,this.getAttribute("tab"));
	return false;
}

config.macros.tabs.switchTab = function(tabset,tab)
{
	var cookie = tabset.getAttribute("cookie");
	var theTab = null
	var nodes = tabset.childNodes;
	for(var t=0; t<nodes.length; t++)
		if(nodes[t].getAttribute && nodes[t].getAttribute("tab") == tab)
			{
			theTab = nodes[t];
			theTab.className = "tab tabSelected";
			}
		else
			nodes[t].className = "tab tabUnselected"
	if(theTab)
		{
		if(tabset.nextSibling && tabset.nextSibling.className == "tabContents")
			tabset.parentNode.removeChild(tabset.nextSibling);
		var tabContent = createTiddlyElement(null,"div",null,"tabContents",null);
		tabset.parentNode.insertBefore(tabContent,tabset.nextSibling);
		var contentTitle = theTab.getAttribute("content");
		wikify(store.getTiddlerText(contentTitle),tabContent,null,store.getTiddler(contentTitle));
		if(cookie)
			{
			config.options[cookie] = tab;
			saveOptionCookie(cookie);
			}
		}
}

// <<gradient [[tiddler name]] vert|horiz rgb rgb rgb rgb... >>
config.macros.gradient.handler = function(place,macroName,params,wikifier)
{
	var terminator = ">>";
	var panel;
	if(wikifier)
		panel = createTiddlyElement(place,"div",null,"gradient",null);
	else
		panel = place;
	panel.style.position = "relative";
	panel.style.overflow = "hidden";
	panel.style.zIndex = "0";
	if(wikifier)
		{
		var styles = config.formatterHelpers.inlineCssHelper(wikifier);
		var t;
		for(t=0; t<styles.length; t++)
			panel.style[styles[t].style] = styles[t].value;
		}
	var colours = [];
	for(t=1; t<params.length; t++)
		{
		var c = new RGB(params[t]);
		if(c)
			colours.push(c);
		}
	drawGradient(panel,params[0] != "vert",colours);
	if(wikifier)
		wikifier.subWikify(panel,terminator);
	if(document.all)
		{
		panel.style.height = "100%";
		panel.style.width = "100%";
		}
}

config.macros.message.handler = function(place,macroName,params)
{
	if(params[0])
		{
		var m = config;
		var p = params[0].split(".");
		for(var t=0; t<p.length; t++)
			{
			if(p[t] in m)
				m = m[p[t]];
			else
				break;
			}
		createTiddlyText(place,m.toString().format(params.splice(1)));
		}
}

config.macros.view.handler = function(place,macroName,params,wikifier,paramString,tiddler)
{
	if((tiddler instanceof Tiddler) && params[0] && (tiddler[params[0]] != undefined))
		{
		switch(params[1])
			{
			case undefined:
				highlightify(tiddler[params[0]],place,highlightHack);
				break;
			case "link":
				createTiddlyLink(place,tiddler[params[0]],true);
				break;
			case "wikified":
				wikify(tiddler[params[0]],place,highlightHack,tiddler);
				break;
			case "date":
				if(params[2])
					createTiddlyText(place,tiddler[params[0]].formatString(params[2]));
				else
					createTiddlyText(place,tiddler[params[0]]);
				break;
			}
		}
}

config.macros.edit.handler = function(place,macroName,params,wikifier,paramString,tiddler)
{
	var field = params[0];
	if((tiddler instanceof Tiddler) && field && (tiddler[field] != undefined))
		{
		story.setDirty(tiddler.title,true);
		switch(field)
			{
			case "title":
				var e = createTiddlyElement(place,"input");
				e.setAttribute("edit","title");
				e.setAttribute("type","text");
				e.value = tiddler.title;
				e.setAttribute("size","40");
				e.setAttribute("autocomplete","off");
				break;
			case "text":
				var wrapper1 = createTiddlyElement(place,"fieldset",null,"fieldsetFix",null);
				var wrapper2 = createTiddlyElement(wrapper1,"div",null,null,null);
				var e = createTiddlyElement(wrapper2,"textarea");
				e.value = tiddler.text;
				var rows = 10;
				var lines = tiddler.text.match(regexpNewLine);
				var maxLines = Math.max(parseInt(config.options.txtMaxEditRows),5)
				if(lines != null && lines.length > rows)
					rows = lines.length + 5;
				rows = Math.min(rows,maxLines);
				e.setAttribute("rows",rows);
				e.setAttribute("edit","text");
				break;
			case "tags":
				var e = createTiddlyElement(place,"input");
				e.setAttribute("edit","tags");
				e.setAttribute("type","text");
				e.value = tiddler.getTags();
				e.setAttribute("size","40");
				e.setAttribute("autocomplete","off");
				break;
			}
		}
}

config.macros.tagChooser.handler = function(place,macroName,params,wikifier,paramString,tiddler)
{
	if(tiddler instanceof Tiddler)
		{
		var title = tiddler.title;
		var lingo = config.views.editor.tagChooser;
		var ontagclick = function(e) {
			if (!e) var e = window.event;
			var tag = this.getAttribute("tag");
			story.setTiddlerTag(title,tag,0);
			return(false);
			};
		var onclick = function(e) {
			if (!e) var e = window.event;
			var popup = Popup.create(this);
			var tags = store.getTags();
			if(tags.length == 0)
				createTiddlyText(createTiddlyElement(popup,"li"),lingo.popupNone);
			for (var t=0; t<tags.length; t++)
				{
				var theTag = createTiddlyButton(createTiddlyElement(popup,"li"),tags[t][0],lingo.tagTooltip.format([tags[t][0]]),ontagclick);
				theTag.setAttribute("tag",tags[t][0]);
				}
			Popup.show(popup,false);
			e.cancelBubble = true;
			if (e.stopPropagation) e.stopPropagation();
			return(false);
			};
		createTiddlyButton(place,lingo.text,lingo.tooltip,onclick);
		}
}

config.macros.toolbar.createCommand = function(place,command,tiddler,theClass)
{
	if(tiddler instanceof Tiddler)
		{
		var title = tiddler.title;
		var onclick = function(e) {
			if (!e) var e = window.event;
			return command.handler(e,this,title);
			};
		var btn = createTiddlyButton(place,command.text,command.tooltip,onclick);
		if(theClass)
			addClass(btn,theClass);
		}
}

// Invoke the first command encountered from a given place that is tagged with a specified class
config.macros.toolbar.invokeCommand = function(place,theClass,event)
{
	var children = place.getElementsByTagName("a")
	for (var t=0; t<children.length; t++)
		{
		var c = children[t];
		if(hasClass(c,theClass))
			{
			if(c.onclick instanceof Function)
				c.onclick.call(c,event);
			break;
			}
		}
}

config.macros.toolbar.handler = function(place,macroName,params,wikifier,paramString,tiddler)
{
	for(var t=0; t<params.length; t++)
		{
		var c = params[t];
		var theClass = "";
		switch(c.substr(0,1))
			{
			case "+":
				theClass = "defaultCommand";
				c = c.substr(1);
				break;
			case "-":
				theClass = "cancelCommand";
				c = c.substr(1);
				break;
			}
		if(c in config.commands)
			this.createCommand(place,config.commands[c],tiddler,theClass);
		}
}

// ---------------------------------------------------------------------------------
// Menu and toolbar commands
// ---------------------------------------------------------------------------------

config.commands.closeTiddler.handler = function(event,src,title)
{
	story.closeTiddler(title,true,event.shiftKey || event.altKey);
	return false;
}

config.commands.closeOthers.handler = function(event,src,title)
{
	story.closeAllTiddlers(title);
	return false;
}

config.commands.editTiddler.handler = function(event,src,title)
{
	if(!readOnly)
		{
		clearMessage();
		story.displayTiddler(null,title,DEFAULT_EDIT_TEMPLATE);
		story.focusTiddler(title,"text");
		return false;
		}
}

config.commands.saveTiddler.handler = function(event,src,title)
{
	var newTitle = story.saveTiddler(title,event.shiftKey);
	story.displayTiddler(null,newTitle);
	return false;
}

config.commands.cancelTiddler.handler = function(event,src,title)
{
	story.displayTiddler(null,title);
	return false;
}

config.commands.deleteTiddler.handler = function(event,src,title)
{
	var deleteIt = true; 
	if (config.options.chkConfirmDelete)
		deleteIt = confirm(this.warning.format([title])); 
	if (deleteIt)
		{
		store.removeTiddler(title);
		story.closeTiddler(title,true,event.shiftKey || event.altKey);
		if(config.options.chkAutoSave)
			saveChanges();
		}
	return false;
}

config.commands.permalink.handler = function(event,src,title)
{
	var t = encodeURIComponent(String.encodeTiddlyLink(title));
	if(window.location.hash != t)
		window.location.hash = t;
	return false;
}

config.commands.references.handler = function(event,src,title)
{
	var popup = Popup.create(src);
	if(popup)
		{
		var references = store.getReferringTiddlers(title);
		var c = false;
		for(var r=0; r<references.length; r++)
			if(references[r].title != title)
				{
				createTiddlyLink(createTiddlyElement(popup,"li"),references[r].title,true);
				c = true;
				}
		if(!c)
			createTiddlyText(createTiddlyElement(popup,"li",null,"disabled"),this.popupNone);
		}
	Popup.show(popup,false);
	event.cancelBubble = true;
	if (event.stopPropagation) event.stopPropagation();
	return true;
}

config.commands.jump.handler = function(event,src,title)
{
	var popup = Popup.create(src);
	if(popup)
		{
		story.forEachTiddler(function(title,element) {
			createTiddlyLink(createTiddlyElement(popup,"li"),title,true);
			});
		}
	Popup.show(popup,false);
	event.cancelBubble = true;
	if (event.stopPropagation) event.stopPropagation();
	return true;
}

// ---------------------------------------------------------------------------------
// Tiddler() object
// ---------------------------------------------------------------------------------

function Tiddler()
{
	this.title = null;
	this.text = null;
	this.modifier = null;
	this.modified = new Date();
	this.created = new Date();
	this.links = [];
	this.tags = [];
	return this;
}

// Load a tiddler from an HTML DIV
Tiddler.prototype.loadFromDiv = function(divRef,title)
{
	var text = Tiddler.unescapeLineBreaks(divRef.firstChild ? divRef.firstChild.nodeValue : "");
	var modifier = divRef.getAttribute("modifier");
	var modified = Date.convertFromYYYYMMDDHHMM(divRef.getAttribute("modified"));
	var c = divRef.getAttribute("created");
	var created = c ? Date.convertFromYYYYMMDDHHMM(c) : modified;
	var tags = divRef.getAttribute("tags");
	this.set(title,text,modifier,modified,tags,created);
	return this;
}

// Format the text for storage in an HTML DIV
Tiddler.prototype.saveToDiv = function()
{
	return '<div tiddler="%0" modifier="%1" modified="%2" created="%3" tags="%4">%5</div>'.format([
			this.title.htmlEncode(),
			this.modifier.htmlEncode(),
			this.modified.convertToYYYYMMDDHHMM(),
			this.created.convertToYYYYMMDDHHMM(),
			this.getTags().htmlEncode(),
			this.escapeLineBreaks().htmlEncode()
		]);
}

// Format the text for storage in an RSS item
Tiddler.prototype.saveToRss = function(url)
{
	var s = [];
	s.push("<item>");
	s.push("<title>" + this.title.htmlEncode() + "</title>");
	s.push("<description>" + this.text.replace(regexpNewLine,"<br />").htmlEncode() + "</description>");
	for(var t=0; t<this.tags.length; t++)
		s.push("<category>" + this.tags[t] + "</category>");
	s.push("<link>" + url + "#" + encodeURIComponent(String.encodeTiddlyLink(this.title)) + "</link>");
	s.push("<pubDate>" + this.modified.toGMTString() + "</pubDate>");
	s.push("</item>");
	return(s.join("\n"));
}

// Change the text and other attributes of a tiddler
Tiddler.prototype.set = function(title,text,modifier,modified,tags,created)
{
	if(title != undefined)
		this.title = title;
	if(text != undefined)
		this.text = text;
	if(modifier != undefined)
		this.modifier = modifier;
	if(modified != undefined)
		this.modified = modified;
	if(created != undefined)
		this.created = created;
	if(tags != undefined)
		this.tags = (typeof tags == "string") ? tags.readBracketedList() : tags;
	else if(this.tags == undefined)
		this.tags = [];
	this.changed();
	return this;
}

// Get the tags for a tiddler as a string (space delimited, using [[brackets]] for tags containing spaces)
Tiddler.prototype.getTags = function()
{
	if(this.tags)
		{
		var results = [];
		for(var t=0; t<this.tags.length; t++)
			results.push(String.encodeTiddlyLink(this.tags[t]));
		return results.join(" ");
		}
	else
		return "";
}

var regexpBackSlashEn = new RegExp("\\\\n","mg");
var regexpBackSlash = new RegExp("\\\\","mg");
var regexpBackSlashEss = new RegExp("\\\\s","mg");
var regexpNewLine = new RegExp("\n","mg");
var regexpCarriageReturn = new RegExp("\r","mg");

// Static method to Convert "\n" to newlines, "\s" to "\"
Tiddler.unescapeLineBreaks = function(text)
{
	if(text && text != "")
		return text.replace(regexpBackSlashEn,"\n").replace(regexpBackSlashEss,"\\").replace(regexpCarriageReturn,"");
	else
		return "";
}

// Convert newlines to "\n", "\" to "\s"
Tiddler.prototype.escapeLineBreaks = function()
{
	return this.text.replace(regexpBackSlash,"\\s").replace(regexpNewLine,"\\n").replace(regexpCarriageReturn,"");
}

// Updates the secondary information (like links[] array) after a change to a tiddler
Tiddler.prototype.changed = function()
{
	this.links = [];
	var nextPos = 0;
	var theLink;
	var aliasedPrettyLink = "\\[\\[([^\\[\\]\\|]+)\\|([^\\[\\]\\|]+)\\]\\]";
	var prettyLink = "\\[\\[([^\\]]+)\\]\\]";
	var wikiNameRegExp = new RegExp("(" + config.textPrimitives.wikiLink + ")|(?:" + aliasedPrettyLink + ")|(?:" + prettyLink + ")","mg");
	do {
		var formatMatch = wikiNameRegExp.exec(this.text);
		if(formatMatch)
			{
			if(formatMatch[1] && formatMatch[1].substr(0,1) != config.textPrimitives.unWikiLink && formatMatch[1] != this.title)
				this.links.pushUnique(formatMatch[1]);
			else if(formatMatch[2] && store.tiddlerExists(formatMatch[3]))
				this.links.pushUnique(formatMatch[3]);
			else if(formatMatch[4] && formatMatch[4] != this.title)
				this.links.pushUnique(formatMatch[4]);
			}
	} while(formatMatch);
	return;
}

Tiddler.prototype.getSubtitle = function()
{
	var theModifier = this.modifier;
	if(!theModifier)
		theModifier = config.messages.subtitleUnknown;
	var theModified = this.modified;
	if(theModified)
		theModified = theModified.toLocaleString();
	else
		theModified = config.messages.subtitleUnknown;
	return(theModifier + ", " + theModified);
}

// ---------------------------------------------------------------------------------
// TiddlyWiki() object contains Tiddler()s
// ---------------------------------------------------------------------------------

function TiddlyWiki()
{
	var tiddlers = {}; // Hashmap by name of tiddlers
	this.namedNotifications = []; // Array of {name:,notify:} of notification functions
	this.notificationLevel = 0;
	this.clear = function() {
		tiddlers = {};
		this.setDirty(false);
		};
	this.fetchTiddler = function(title) {
    	return tiddlers[title];
		};
	this.deleteTiddler = function(title) {
	    delete tiddlers[title];
		};
	this.addTiddler = function(tiddler) {
	    tiddlers[tiddler.title] = tiddler;
		};
	this.forEachTiddler = function(callback) {
		for(var t in tiddlers)
			callback.call(this,t,tiddlers[t]);
		};
}

// Set the dirty flag
TiddlyWiki.prototype.setDirty = function(dirty)
{
	this.dirty = dirty;
}

TiddlyWiki.prototype.isDirty = function()
{
	return this.dirty;
}

TiddlyWiki.prototype.suspendNotifications = function()
{
	this.notificationLevel--;
}

TiddlyWiki.prototype.resumeNotifications = function()
{
	this.notificationLevel++;
}

// Invoke the notification handlers for a particular tiddler
TiddlyWiki.prototype.notify = function(title,doBlanket)
{
	if(!this.notificationLevel)
		for(var t=0; t<this.namedNotifications.length; t++)
			{
			var n = this.namedNotifications[t];
			if((n.name == null && doBlanket) || (n.name == title))
				n.notify(title);
			}
}

// Invoke the notification handlers for all tiddlers
TiddlyWiki.prototype.notifyAll = function()
{
	if(!this.notificationLevel)
		for(var t=0; t<this.namedNotifications.length; t++)
			{
			var n = this.namedNotifications[t];
			n.notify(n.name);
			}
}

// Add a notification handler to a tiddler
TiddlyWiki.prototype.addNotification = function(title,fn)
{
	for (var i=0; i<this.namedNotifications.length; i++)
		if((this.namedNotifications[i].name == title) && (this.namedNotifications[i].notify == fn))
			return this;
	this.namedNotifications.push({name: title, notify: fn});
	return this;
}

TiddlyWiki.prototype.removeTiddler = function(title)
{
	var tiddler = this.fetchTiddler(title);
	if(tiddler)
		{
		this.deleteTiddler(title);
		this.notify(title,true);
		this.setDirty(true);
		}
}

TiddlyWiki.prototype.tiddlerExists = function(title)
{
	var t = this.fetchTiddler(title);
	var s = config.shadowTiddlers[title];
	return (t != undefined && t instanceof Tiddler) || (s != undefined && s instanceof String);
}

TiddlyWiki.prototype.getTiddler = function(title)
{
	var t = this.fetchTiddler(title);
	if(t != undefined && t instanceof Tiddler)
		return t;
	else
		return null;
}

TiddlyWiki.prototype.getTiddlerText = function(title,defaultText)
{
	if(!title)
		return(defaultText);
	var tiddler = this.fetchTiddler(title);
	if(tiddler)
		return tiddler.text;
	else if(config.shadowTiddlers[title])
		return config.shadowTiddlers[title];
	else if(defaultText)
		return defaultText;
	else
		return null;
}

TiddlyWiki.prototype.getRecursiveTiddlerText = function(title,defaultText,depth)
{
	var bracketRegExp = new RegExp("(?:\\[\\[([^\\]]+)\\]\\])","mg");
	var text = this.getTiddlerText(title,defaultText);
	if(text == null)
		return "";
	var textOut = [];
	var lastPos = 0;
	do {
		var match = bracketRegExp.exec(text);
		if(match)
			{
			textOut.push(text.substr(lastPos,match.index-lastPos));
			if(match[1])
				{
				if(depth <= 0)
					textOut.push(match[1]);
				else
					textOut.push(this.getRecursiveTiddlerText(match[1],match[1],depth-1));
				}
			lastPos = match.index + match[0].length;
			}
		else
			textOut.push(text.substr(lastPos));
	} while(match);
	return(textOut.join(""));
}

TiddlyWiki.prototype.saveTiddler = function(title,newTitle,newBody,modifier,modified,tags)
{
	var tiddler = this.fetchTiddler(title);
	var created;
	if(tiddler)
		{
 		created = tiddler.created; // preserve created date
		this.deleteTiddler(title);
		}
	else
		{
		tiddler = new Tiddler();
		created = modified;
		}
	tiddler.set(newTitle,newBody,modifier,modified,tags,created);
	this.addTiddler(tiddler);
	if(title != newTitle)
		this.notify(title,true);
	this.notify(newTitle,true);
	this.setDirty(true);
	return tiddler;
}

TiddlyWiki.prototype.createTiddler = function(title)
{
	tiddler = this.fetchTiddler(title);
	if(!tiddler)
		{
		tiddler = new Tiddler();
        tiddler.title = title;
		this.addTiddler(tiddler);
		this.setDirty(true);
		}
	return tiddler;
}

// Load contents of a tiddlywiki from an HTML DIV
TiddlyWiki.prototype.loadFromDiv = function(srcID,idPrefix)
{
	if(document.normalize)
		document.normalize();
	var lenPrefix = idPrefix.length;
	var store = document.getElementById(srcID).childNodes;
	for(var t = 0; t < store.length; t++)
		{
		var e = store[t];
		var title = null;
		if(e.getAttribute)
			title = e.getAttribute("tiddler");
		if(!title && e.id && e.id.substr(0,lenPrefix) == idPrefix)
			title = e.id.substr(lenPrefix);
		if(title && title != "")
			{
			var tiddler = this.createTiddler(title);
			tiddler.loadFromDiv(e,title);
			}
		}
	this.setDirty(false);
}

// Return an array of tiddlers matching a search regular expression
TiddlyWiki.prototype.search = function(searchRegExp,sortField,excludeTag)
{
	var candidates = this.reverseLookup("tags",excludeTag,false);
	var results = [];
	for(var t=0; t<candidates.length; t++)
		{
		if(searchRegExp.test(candidates[t].title) || searchRegExp.test(candidates[t].text))
			results.push(candidates[t]);
		}
	if(!sortField)
		sortField = "title";
	results.sort(function (a,b) {if(a[sortField] == b[sortField]) return(0); else return (a[sortField] < b[sortField]) ? -1 : +1; });
	return results;
}

// Return an array of all the tags in use. Each member of the array is another array where [0] is the name of the tag and [1] is the number of occurances
TiddlyWiki.prototype.getTags = function()
{
	var results = [];
	this.forEachTiddler(function(title,tiddler) {
		for(var g=0; g<tiddler.tags.length; g++)
			{
			var tag = tiddler.tags[g];
			var f = false;
			for(var c=0; c<results.length; c++)
				if(results[c][0] == tag)
					{
					f = true;
					results[c][1]++;
					}
			if(!f)
				results.push([tag,1]);
			}
		});
	results.sort(function (a,b) {if(a[0].toLowerCase() == b[0].toLowerCase()) return(0); else return (a[0].toLowerCase() < b[0].toLowerCase()) ? -1 : +1; });
	return results;
}

// Return an array of the tiddlers that are tagged with a given tag
TiddlyWiki.prototype.getTaggedTiddlers = function(tag,sortField)
{
	return this.reverseLookup("tags",tag,true,sortField);
}

// Return an array of the tiddlers that link to a given tiddler
TiddlyWiki.prototype.getReferringTiddlers = function(title,unusedParameter,sortField)
{
	return this.reverseLookup("links",title,true,sortField);
}

// Return an array of the tiddlers that do or do not have a specified entry in the specified storage array (ie, "links" or "tags")
// lookupMatch == true to match tiddlers, false to exclude tiddlers
TiddlyWiki.prototype.reverseLookup = function(lookupField,lookupValue,lookupMatch,sortField)
{
	var results = [];
	this.forEachTiddler(function(title,tiddler) {
		var f = !lookupMatch;
		for(var lookup=0; lookup<tiddler[lookupField].length; lookup++)
			if(tiddler[lookupField][lookup] == lookupValue)
				f = lookupMatch;
		if(f)
			results.push(tiddler);
		});
	if(!sortField)
		sortField = "title";
	results.sort(function (a,b) {if(a[sortField] == b[sortField]) return(0); else return (a[sortField] < b[sortField]) ? -1 : +1; });
	return results;
}

// Return the tiddlers as a sorted array
TiddlyWiki.prototype.getTiddlers = function(field)
{
	var results = [];
	this.forEachTiddler(function(title,tiddler) {
		results.push(tiddler);
		});
	if(field)
		results.sort(function (a,b) {if(a[field] == b[field]) return(0); else return (a[field] < b[field]) ? -1 : +1; });
	return results;
}

// Return array of names of tiddlers that are referred to but not defined
TiddlyWiki.prototype.getMissingLinks = function(sortField)
{
	var results = [];
	this.forEachTiddler(function (title,tiddler) {
		if(tiddler.tags.find("systemConfig") == null && tiddler.tags.find("excludeMissing") == null)
			for(var n=0; n<tiddler.links.length;n++)
				{
				var link = tiddler.links[n];
				if(this.fetchTiddler(link) == null)
					results.pushUnique(link);
				}
		});
	results.sort();
	return results;
}

// Return an array of names of tiddlers that are defined but not referred to
TiddlyWiki.prototype.getOrphans = function()
{
	var results = [];
	this.forEachTiddler(function (title,tiddler) {
		if(this.getReferringTiddlers(title).length == 0)
			results.push(title);
		});
	results.sort();
	return results;
}

// Return an array of names of tiddlers that are defined but not referred to
TiddlyWiki.prototype.getShadowed = function()
{
	var results = [];
	for(var t in config.shadowTiddlers)
		if(typeof config.shadowTiddlers[t] == "string")
			results.push(t);
	results.sort();
	return results;
}

// ---------------------------------------------------------------------------------
// Story functions
// ---------------------------------------------------------------------------------

function displayTiddlers(srcElement,titles,template,unused1,unused2,animate,slowly)
{
	story.displayTiddlers(srcElement,titles,template,animate,slowly);
}

function displayTiddler(srcElement,title,template,unused1,unused2,animate,slowly)
{
	story.displayTiddler(srcElement,title,template,animate,slowly);
}

// A story is a HTML div containing a sequence of tiddlers that can be manipulated
// container - id of containing element
// idPrefix - string prefix prepended to title to make ids for tiddlers in this story
function Story(container,idPrefix)
{
	this.container = container;
	this.idPrefix = idPrefix;
	this.highlightRegExp = null;
}

// Iterate through all the tiddlers in a story
// fn - callback function to be called for each tiddler. Arguments are:
//      tiddler - reference to Tiddler object
//      element - reference to tiddler display element
Story.prototype.forEachTiddler = function(fn)
{
	var place = document.getElementById(this.container);
	var e = place.firstChild;
	while(e)
		{
		var n = e.nextSibling;
		var title = e.getAttribute("tiddler");
		fn.call(this,title,e);
		e = n;
		}
}

// Display several tiddlers given their titles in an array. Parameters same as displayTiddler(), except:
// titles - array of string titles
Story.prototype.displayTiddlers = function(srcElement,titles,template,animate,slowly)
{
	for(var t = titles.length-1;t>=0;t--)
		this.displayTiddler(srcElement,titles[t],template,animate,slowly);
}

// Display a given tiddler with a given template. If the tiddler is already displayed but with a different
// template, it is switched to the specified template
// srcElement - reference to element from which this one is being opened
// title - title of tiddler to display
// template - the name of the tiddler containing the template or one of the constants DEFAULT_VIEW_TEMPLATE and DEFAULT_EDIT_TEMPLATE
// animate - whether to perform animations
// slowly - whether to perform animations in slomo
Story.prototype.displayTiddler = function(srcElement,title,template,animate,slowly)
{
	var place = document.getElementById(this.container);
	var theTiddler = document.getElementById(this.idPrefix + title);
	if(theTiddler)
		this.refreshTiddler(title,template);
	else
		{
		var before;
		var after = this.findContainingTiddler(srcElement);
		if(after == null)
			before = place.firstChild;
		else if(after.nextSibling)
			before = after.nextSibling;
		else
			before = null;
		theTiddler = this.createTiddler(place,before,title,template);
		}
	if(srcElement)
		{
		if(config.options.chkAnimate && (animate == undefined || animate == true))
			anim.startAnimating(new Cascade(title,srcElement,theTiddler,slowly),new Scroller(theTiddler,slowly));
		else
			window.scrollTo(0,ensureVisible(theTiddler));
		}
}

// Create a tiddler frame at the appropriate place in a story column
// place - reference to parent element
// before - null, or reference to element before which to insert new tiddler
// title - title of new tiddler
// template - the name of the tiddler containing the template or one of the constants DEFAULT_VIEW_TEMPLATE and DEFAULT_EDIT_TEMPLATE
Story.prototype.createTiddler = function(place,before,title,template)
{
	theTiddler = createTiddlyElement(null,"div",this.idPrefix + title,"tiddler",null);
	place.insertBefore(theTiddler,before);
	this.refreshTiddler(title,template);
	return theTiddler;
}

// Overridable for choosing the name of the template to apply for a tiddler
Story.prototype.chooseTemplateForTiddler = function(title,template)
{
	if(!template)
		template = DEFAULT_VIEW_TEMPLATE;
	if(template == DEFAULT_VIEW_TEMPLATE || template == DEFAULT_EDIT_TEMPLATE)
		template = config.tiddlerTemplates[template];
	return template;
}

// Overridable for extracting the text of a template from a tiddler
Story.prototype.getTemplateForTiddler = function(title,template)
{
	return store.getTiddlerText(template);
}

// Apply a template to an existing tiddler if it is not already displayed using that template
// title - title of tiddler to update
// template - the name of the tiddler containing the template or one of the constants DEFAULT_VIEW_TEMPLATE and DEFAULT_EDIT_TEMPLATE
// force - if true, forces the refresh even if the template hasn't changedd
Story.prototype.refreshTiddler = function(title,template,force)
{
	var theTiddler = document.getElementById(this.idPrefix + title);
	if(theTiddler)
		{
		theTiddler.setAttribute("dirty","false");
		template = this.chooseTemplateForTiddler(title,template);
		var currTemplate = theTiddler && theTiddler.getAttribute("template");
		if((template != currTemplate) || force)
			{
			var theStory = this;
			var tiddler = store.getTiddler(title);
			if(!tiddler)
				{
				tiddler = new Tiddler();
				if(config.shadowTiddlers[title])
					tiddler.set(title,config.shadowTiddlers[title],config.views.wikified.shadowModifier,version.date,[],version.date);
				else
					tiddler.set(title,config.views.wikified.defaultText.format([title]),config.views.wikified.defaultModifier,version.date,[],version.date);
				}
			theTiddler.setAttribute("tags",tiddler.tags.join(" "));
			theTiddler.setAttribute("tiddler",title);
			theTiddler.setAttribute("template",template);
			theTiddler.onmouseover = function(e) {
				if(window.addClass instanceof Function)
					addClass(this,"selected");
				};
			theTiddler.onmouseout = function(e) {
				if(window.removeClass instanceof Function)
					removeClass(this,"selected");
				};
			theTiddler.ondblclick = function(e) {
				if (!e) var e = window.event;
				var theTarget = resolveTarget(e);
				if(!readOnly && theTarget && theTarget.nodeName.toLowerCase() != "input" && theTarget.nodeName.toLowerCase() != "textarea")
					{
					if(document.selection && document.selection.empty)
						document.selection.empty();
					config.macros.toolbar.invokeCommand(theTiddler,"defaultCommand",e);
					e.cancelBubble = true;
					if (e.stopPropagation) e.stopPropagation();
					return true;
					}
				else
					return false;
				};
			theTiddler.onkeypress = function(e) {
				if (!e) var e = window.event;
				clearMessage();
				var consume = false;
				switch(e.keyCode)
					{
					case 13: // Ctrl-Enter
					case 10: // Ctrl-Enter on IE PC
					case 77: // Ctrl-Enter is "M" on some platforms
						if(e.ctrlKey)
							{
							theStory.blurTiddler(title);
							config.macros.toolbar.invokeCommand(theTiddler,"defaultCommand",e);
							consume = true;
							}
						break;
					case 27: // Escape
						theStory.blurTiddler(title);
						config.macros.toolbar.invokeCommand(theTiddler,"cancelCommand",e);
						consume = true;
						break;
					}
				e.cancelBubble = consume;
				if(consume)
					if (e.stopPropagation) e.stopPropagation();
				return(!consume);
				};
			var html = this.getTemplateForTiddler(title,template);
			theTiddler.innerHTML = html;
			applyHtmlMacros(theTiddler,tiddler);
			if(store.getTaggedTiddlers(title).length > 0)
				addClass(theTiddler,"isTag");
			else
				removeClass(theTiddler,"isTag");
			if(!store.tiddlerExists(title))
				{
				if(typeof config.shadowTiddlers[title] == "string")
					addClass(theTiddler,"shadow");
				else
					addClass(theTiddler,"missing");
				}
			else
				{
				removeClass(theTiddler,"shadow");
				removeClass(theTiddler,"missing");
				}
			}
		}
	return(theTiddler);
}

// Focus a specified tiddler. Attempts to focus the specified field, otherwise the first edit field it finds
Story.prototype.focusTiddler = function(title,field)
{
	var tiddler = document.getElementById(this.idPrefix + title);
	if(tiddler != null)
		{
		var children = tiddler.getElementsByTagName("*")
		var e = null;
		for (var t=0; t<children.length; t++)
			{
			var c = children[t];
			if(c.tagName.toLowerCase() == "input" || c.tagName.toLowerCase() == "textarea")
				{
				if(!e)
					e = c;
				if(c.getAttribute("edit") == field)
					e = c;
				}
			}
		if(e)
			{
			e.focus();
			e.select();
			}
		}
}

// Ensures that a specified tiddler does not have the focus
Story.prototype.blurTiddler = function (title)
{
	var tiddler = document.getElementById(this.idPrefix + title);
	if(tiddler != null)
		{
		tiddler.focus();
		tiddler.blur();
		}
}

// Adds a specified tag to the edit controls (if any) for a particular tiddler)
// title - name of tiddler
// tag - name of tag, without any [[brackets]]
// mode - +1 to add the tag, -1 to remove it, 0 to toggle it
Story.prototype.setTiddlerTag = function(title,tag,add)
{
	var tiddler = document.getElementById(this.idPrefix + title);
	if(tiddler != null)
		{
		var children = tiddler.getElementsByTagName("input")
		for (var t=0; t<children.length; t++)
			{
			var c = children[t];
			if(c.tagName.toLowerCase() == "input" && c.getAttribute("edit") == "tags")
				{
				var tags = c.value.readBracketedList();
				var p = tags.find(tag);
				if(add == +1)
					{
					if(p == null)
						tags.push(tag);
					}
				else if(add == -1)
					{
					if(p != null)
						tags.splice(p,1);
					}
				else if(add == 0)
					{
					if(p != null)
						tags.splice(p,1);
					else
						tags.push(tag);
					}
				var result = [];
				for(var r=0; r<tags.length; r++)
					result.push(String.encodeTiddlyLink(tags[r]));
				c.value = result.join(" ");
				}
			}
		}
}

// Close a specified tiddler
// title - name of tiddler to close
// animate - whether to perform animations
// slowly - whether to perform animations in slomo
Story.prototype.closeTiddler = function(title,animate,slowly)
{
	var tiddler = document.getElementById(this.idPrefix + title);
	if(tiddler != null)
		{
		clearMessage();
		this.scrubTiddler(tiddler);
		if(config.options.chkAnimate && animate)
			anim.startAnimating(new Slider(tiddler,false,slowly,"all"));
		else
			tiddler.parentNode.removeChild(tiddler);
		}
}

// Scrub IDs from a tiddler. This is so that the 'ghost' of a tiddler while it is being closed
// does not interfere with things
// tiddler - reference to the tiddler element
Story.prototype.scrubTiddler = function(tiddler)
{
	tiddler.id = null;
}

// Set the 'dirty' flag of a tiddler
// tiddler - title of tiddler to change
// dirty - new boolean status of flag
Story.prototype.setDirty = function(title,dirty)
{
	var tiddler = document.getElementById(this.idPrefix + title);
	if(tiddler != null)
		tiddler.setAttribute("dirty",dirty ? "true" : "false");
}

// Close all tiddlers in the story
Story.prototype.closeAllTiddlers = function(exclude)
{
	clearMessage();
	this.forEachTiddler(function(title,element) {
		if((title != exclude) && element.getAttribute("dirty") != "true")
			this.closeTiddler(title);
		});
	window.scrollTo(0,0);
}

// Perform a search and display the result
// text - text to search for
// useCaseSensitive - true for case sensitive matching
// useRegExp - true to interpret text as a RegExp
Story.prototype.search = function(text,useCaseSensitive,useRegExp)
{
	this.closeAllTiddlers();
	highlightHack = new RegExp(useRegExp ? text.escapeRegExp() : text,useCaseSensitive ? "mg" : "img");
	var matches = store.search(highlightHack,"title","excludeSearch");
	for(var t=matches.length-1; t>=0; t--)
		this.displayTiddler(null,matches[t].title);
	highlightHack = null;
	var q = useRegExp ? "/" : "'";
	if(matches.length > 0)
		displayMessage(config.macros.search.successMsg.format([matches.length.toString(),q + text + q]));
	else
		displayMessage(config.macros.search.failureMsg.format([q + text + q]));
}

// Determine if the specified element is within a tiddler in this story
// e - reference to an element
// returns: reference to a tiddler element or null if none
Story.prototype.findContainingTiddler = function(e)
{
	while(e && !hasClass(e,"tiddler"))
		e = e.parentNode;
	return(e);
}

// Gather any saveable fields from a tiddler element
// e - reference to an element to scan recursively
// fields - object to contain gathered field values
Story.prototype.gatherSaveFields = function(e,fields)
{
	if(e && e.getAttribute)
		{
		var f = e.getAttribute("edit");
		if(f)
			fields[f] = e.value.replace(/\r/mg,"");;
		if(e.hasChildNodes())
			{
			var c = e.childNodes;
			for(var t=0; t<c.length; t++)
				this.gatherSaveFields(c[t],fields)
			}
		}
}

// Save any open edit fields of a tiddler and updates the display as necessary
// title - name of tiddler
// minorUpdate - true if the modified date shouldn't be updated
// returns: title of saved tiddler, or null if not saved
Story.prototype.saveTiddler = function(title,minorUpdate)
{
	var tiddler = document.getElementById(this.idPrefix + title);
	if(tiddler != null)
		{
		var fields = {};
		this.gatherSaveFields(tiddler,fields);
		var newTitle = fields.title ? fields.title : title;
		if(store.tiddlerExists(newTitle) && newTitle != title)
			{
			if(confirm(config.messages.overwriteWarning.format([newTitle.toString()])))
				this.closeTiddler(newTitle,false,false);
			else
				return null;
			}
		tiddler.id = this.idPrefix + newTitle;
		tiddler.setAttribute("tiddler",newTitle);
		if(config.options.chkForceMinorUpdate)
			minorUpdate = !minorUpdate;
		var newDate = new Date();
		store.saveTiddler(title,newTitle,fields.text,config.options.txtUserName,minorUpdate ? undefined : newDate,fields.tags);
		if(config.options.chkAutoSave)
			saveChanges();
		return newTitle;
		}
	return null;
}

Story.prototype.permaView = function()
{
	var links = [];
	this.forEachTiddler(function(title,element) {
		links.push(String.encodeTiddlyLink(title));
		});
	window.location.hash = encodeURIComponent(links.join(" "));
}

// ---------------------------------------------------------------------------------
// Message area
// ---------------------------------------------------------------------------------

function displayMessage(text,linkText)
{
	var msgArea = document.getElementById("messageArea");
	if(!msgArea)
		{
		alert(text);
		return;
		}
	if(!msgArea.hasChildNodes())
		createTiddlyButton(createTiddlyElement(msgArea,"div",null,"messageToolbar"),config.messages.messageClose.text,config.messages.messageClose.tooltip,clearMessage);
	var msg;
	if(linkText)
		{
		msg = createTiddlyElement(msgArea,"div",null,null,null);
		var link = createTiddlyElement(msg,"a",null,null,text);
		link.href = linkText;
		link.target = "_blank";
		}
	else
		msg = createTiddlyElement(msgArea,"div",null,null,text);
	msgArea.style.display = "block";
}

function clearMessage()
{
	var msgArea = document.getElementById("messageArea");
	removeChildren(msgArea);
	msgArea.style.display = "none";
}

// ---------------------------------------------------------------------------------
// Refresh mechanism
// ---------------------------------------------------------------------------------

config.refreshers = {
	link: function(e,changeList)
		{
		var title = e.getAttribute("tiddlyLink");
		refreshTiddlyLink(e,title);
		},
		
	content: function(e,changeList)
		{
		var title = e.getAttribute("tiddler");
		var force = e.getAttribute("force");
		if(force != null || changeList == null || changeList.find(title) != null)
			{
			removeChildren(e);
			wikify(store.getTiddlerText(title,title),e,null,null);
			}
		}
};

function refreshElements(root,changeList)
{
    var nodes = root.childNodes;
    for(var c=0; c<nodes.length; c++)
		{
		var e = nodes[c],type;
		if(e.getAttribute)
			type = e.getAttribute("refresh");
		else
			type = null;
		var refresher = config.refreshers[type];
		if(refresher == undefined)
			{
			if(e.hasChildNodes())
				refreshElements(e,changeList);
			}
		else
			refresher(e,changeList);
		}
}

function applyHtmlMacros(root,tiddler)
{
    var e = root.firstChild;
    while(e)
		{
		var nextChild = e.nextSibling;
		if(e.getAttribute)
			{
			var macro = e.getAttribute("macro");
			if(macro)
				{
				var params = "";
				var p = macro.indexOf(" ");
				if(p != -1)
					{
					params = macro.substr(p+1);
					macro = macro.substr(0,p);
					}
				invokeMacro(e,macro,params,null,tiddler);
				}
			}
		if(e.hasChildNodes())
			applyHtmlMacros(e,tiddler);
		e = nextChild;
		}
}

function refreshPageTemplate(title)
{
	var stash = createTiddlyElement(document.body,"div");
	stash.style.display = "none";
	var display = document.getElementById("tiddlerDisplay");
	var nodes;
	if(display)
		{
		nodes = display.childNodes;
		for(var t=nodes.length-1; t>=0; t--)
			stash.appendChild(nodes[t]);
		}
	var wrapper = document.getElementById("contentWrapper");
	if(!title)
		title = "PageTemplate";
	var html = store.getTiddlerText(title);
	wrapper.innerHTML = html;
	applyHtmlMacros(wrapper,null);
	refreshElements(wrapper,null);
	display = document.getElementById("tiddlerDisplay");
	if(!display)
		display = createTiddlyElement(wrapper,"div","tiddlerDisplay");
	nodes = stash.childNodes;
	for(t=nodes.length-1; t>=0; t--)
		display.appendChild(nodes[t]);
	stash.parentNode.removeChild(stash);
}

function refreshDisplay(hint)
{
	var e = document.getElementById("contentWrapper");
	refreshElements(e,hint == null ? null : [hint]);
}

function refreshPageTitle()
{
	document.title = wikifyPlain("SiteTitle") + " - " + wikifyPlain("SiteSubtitle");
}

function refreshStyles(title)
{
	setStylesheet(title == null ? "" : store.getRecursiveTiddlerText(title,"",10),title);
}

// ---------------------------------------------------------------------------------
// Options cookie stuff
// ---------------------------------------------------------------------------------

function loadOptionsCookie()
{
	var cookies = document.cookie.split(";");
	for(var c=0; c<cookies.length; c++)
		{
		var p = cookies[c].indexOf("=");
		if(p != -1)
			{
			var name = cookies[c].substr(0,p).trim();
			var value = cookies[c].substr(p+1).trim();
			switch(name.substr(0,3))
				{
				case "txt":
					config.options[name] = unescape(value);
					break;
				case "chk":
					config.options[name] = value == "true";
					break;
				}
			}
		}
}

function saveOptionCookie(name)
{
	var c = name + "=";
	switch(name.substr(0,3))
		{
		case "txt":
			c += escape(config.options[name].toString());
			break;
		case "chk":
			c += config.options[name] ? "true" : "false";
			break;
		}
	c += "; expires=Fri, 1 Jan 2038 12:00:00 UTC; path=/";
	document.cookie = c;
}

// ---------------------------------------------------------------------------------
// Saving
// ---------------------------------------------------------------------------------

var saveUsingSafari = false;
var startSaveArea = '<div id="' + 'storeArea">'; // Split up into two so that indexOf() of this source doesn't find it
var endSaveArea = '</d' + 'iv>';

// Check if there any unsaved changes before exitting
function checkUnsavedChanges()
{
	if(store && store.isDirty && store.isDirty())
		{
		if(confirm(config.messages.unsavedChangesWarning))
			saveChanges();
		}
}

// Save this tiddlywiki with the pending changes
function saveChanges()
{
	clearMessage();
	// Get the URL of the document
	var originalPath = document.location.toString();
	// Check we were loaded from a file URL
	if(originalPath.substr(0,5) != "file:")
		{
		alert(config.messages.notFileUrlError);
		displayTiddler(null,"SaveChanges");
		return;
		}
	// Remove any location part of the URL
	var hashPos = originalPath.indexOf("#");
	if(hashPos != -1)
		originalPath = originalPath.substr(0,hashPos);
	// Convert to a native file format assuming
	// "file:///x:/path/path/path..." - pc local file --> "x:\path\path\path..."
	// "file://///server/share/path/path/path..." - FireFox pc network file --> "\\server\share\path\path\path..."
	// "file:///path/path/path..." - mac/unix local file --> "/path/path/path..."
	// "file://server/share/path/path/path..." - pc network file --> "\\server\share\path\path\path..."
	var localPath;
	if(originalPath.charAt(9) == ":") // pc local file
		localPath = unescape(originalPath.substr(8)).replace(new RegExp("/","g"),"\\");
	else if(originalPath.indexOf("file://///") == 0) // FireFox pc network file
		localPath = "\\\\" + unescape(originalPath.substr(10)).replace(new RegExp("/","g"),"\\");
	else if(originalPath.indexOf("file:///") == 0) // mac/unix local file
		localPath = unescape(originalPath.substr(7));
	else if(originalPath.indexOf("file:/") == 0) // mac/unix local file
		localPath = unescape(originalPath.substr(5));
	else // pc network file
		localPath = "\\\\" + unescape(originalPath.substr(7)).replace(new RegExp("/","g"),"\\");
	// Load the original file
	var original = loadFile(localPath);
	if(original == null)
		{
		alert(config.messages.cantSaveError);
		displayTiddler(null,"SaveChanges");
		return;
		}
	// Locate the storeArea div's
	var posOpeningDiv = original.indexOf(startSaveArea);
	var posClosingDiv = original.lastIndexOf(endSaveArea);
	if((posOpeningDiv == -1) || (posClosingDiv == -1))
		{
		alert(config.messages.invalidFileError.format([localPath]));
		return;
		}
	// Save the backup
	if(config.options.chkSaveBackups)
		{
		var backupPath = getBackupPath(localPath);
		var backup = saveFile(backupPath,original);
		if(backup)
			displayMessage(config.messages.backupSaved,"file://" + backupPath);
		else
			alert(config.messages.backupFailed);
		}
	// Save Rss
	if(config.options.chkGenerateAnRssFeed)
		{
		var rssPath = localPath.substr(0,localPath.lastIndexOf(".")) + ".xml";
		var rssSave = saveFile(rssPath,convertUnicodeToUTF8(generateRss()));
		if(rssSave)
			displayMessage(config.messages.rssSaved,"file://" + rssPath);
		else
			alert(config.messages.rssFailed);
		}
	// Save empty template
	if(config.options.chkSaveEmptyTemplate)
		{
		var emptyPath,p;
		if((p = localPath.lastIndexOf("/")) != -1)
			emptyPath = localPath.substr(0,p) + "/empty.html";
		else if((p = localPath.lastIndexOf("\\")) != -1)
			emptyPath = localPath.substr(0,p) + "\\empty.html";
		else
			emptyPath = localPath + ".empty.html";
		var empty = original.substr(0,posOpeningDiv + startSaveArea.length) + original.substr(posClosingDiv);
		var emptySave = saveFile(emptyPath,empty);
		if(emptySave)
			displayMessage(config.messages.emptySaved,"file://" + emptyPath);
		else
			alert(config.messages.emptyFailed);
		}
	// Save new file
	var revised = original.substr(0,posOpeningDiv + startSaveArea.length) + 
				convertUnicodeToUTF8(allTiddlersAsHtml()) + "\n\t\t" +
				original.substr(posClosingDiv);
	var newSiteTitle = convertUnicodeToUTF8((wikifyPlain("SiteTitle") + " - " + wikifyPlain("SiteSubtitle")).htmlEncode());
	revised = revised.replace(new RegExp("<title>[^<]*</title>", "im"),"<title>"+ newSiteTitle +"</title>");
	var save = saveFile(localPath,revised);
	if(save)
		{
		displayMessage(config.messages.mainSaved,"file://" + localPath);
		store.setDirty(false);
		}
	else
		alert(config.messages.mainFailed);
}

function getBackupPath(localPath)
{
	var backSlash = true;
	var dirPathPos = localPath.lastIndexOf("\\");
	if(dirPathPos == -1)
		{
		dirPathPos = localPath.lastIndexOf("/");
		backSlash = false;
		}
	var backupFolder = config.options.txtBackupFolder;
	if(!backupFolder || backupFolder == "")
		backupFolder = ".";
	var backupPath = localPath.substr(0,dirPathPos) + (backSlash ? "\\" : "/") + backupFolder + localPath.substr(dirPathPos);
	backupPath = backupPath.substr(0,backupPath.lastIndexOf(".")) + "." + (new Date()).convertToYYYYMMDDHHMMSSMMM() + ".html";
	return backupPath;
}

function generateRss()
{
	var s = [];
	var d = new Date();
	var u = store.getTiddlerText("SiteUrl",null);
	// Assemble the header
	s.push("<" + "?xml version=\"1.0\"?" + ">");
	s.push("<rss version=\"2.0\">");
	s.push("<channel>");
	s.push("<title>" + wikifyPlain("SiteTitle").htmlEncode() + "</title>");
	if(u)
		s.push("<link>" + u.htmlEncode() + "</link>");
	s.push("<description>" + wikifyPlain("SiteSubtitle").htmlEncode() + "</description>");
	s.push("<language>en-us</language>");
	s.push("<copyright>Copyright " + d.getFullYear() + " " + config.options.txtUserName.htmlEncode() + "</copyright>");
	s.push("<pubDate>" + d.toGMTString() + "</pubDate>");
	s.push("<lastBuildDate>" + d.toGMTString() + "</lastBuildDate>");
	s.push("<docs>http://blogs.law.harvard.edu/tech/rss</docs>");
	s.push("<generator>TiddlyWiki " + version.major + "." + version.minor + "." + version.revision + "</generator>");
	// The body
	var tiddlers = store.getTiddlers("modified");
	var n = config.numRssItems > tiddlers.length ? 0 : tiddlers.length-config.numRssItems;
	for (var t=tiddlers.length-1; t>=n; t--)
		s.push(tiddlers[t].saveToRss(u));
	// And footer
	s.push("</channel>");
	s.push("</rss>");
	// Save it all
	return s.join("\n");
}

function allTiddlersAsHtml()
{
	var savedTiddlers = [];
	var tiddlers = store.getTiddlers("title");
	for (var t = 0; t < tiddlers.length; t++)
		savedTiddlers.push(tiddlers[t].saveToDiv());
	return savedTiddlers.join("\n");
}

// UTF-8 encoding rules:
// 0x0000 - 0x007F:	0xxxxxxx
// 0x0080 - 0x07FF:	110xxxxx 10xxxxxx
// 0x0800 - 0xFFFF:	1110xxxx 10xxxxxx 10xxxxxx

function convertUTF8ToUnicode(u)
{
	var s = "";
	var t = 0;
	var b1, b2, b3;
	while(t < u.length)
		{
		b1 = u.charCodeAt(t++);
		if(b1 < 0x80)
			s += String.fromCharCode(b1);
		else if(b1 < 0xE0)
			{
			b2 = u.charCodeAt(t++);
			s += String.fromCharCode(((b1 & 0x1F) << 6) | (b2 & 0x3F));
			}
		else
			{
			b2 = u.charCodeAt(t++);
			b3 = u.charCodeAt(t++);
			s += String.fromCharCode(((b1 & 0xF) << 12) | ((b2 & 0x3F) << 6) | (b3 & 0x3F));
			}
	}
	return(s);
}

function convertUnicodeToUTF8(s)
{
	if(saveUsingSafari)
		return s;
	else if(window.Components)
		return mozConvertUnicodeToUTF8(s);
	else
		return manualConvertUnicodeToUTF8(s);
}

function manualConvertUnicodeToUTF8(s)
{
	var re = /[^\u0000-\u007F]/g ;
	return s.replace(re, function($0) {return("&#" + $0.charCodeAt(0).toString() + ";");})
}

function mozConvertUnicodeToUTF8(s)
{
	netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
	var converter = Components.classes["@mozilla.org/intl/scriptableunicodeconverter"].createInstance(Components.interfaces.nsIScriptableUnicodeConverter);
	converter.charset = "UTF-8";
	var u = converter.ConvertFromUnicode(s);
	var fin = converter.Finish();
	if(fin.length > 0)
		return u + fin;
	else
		return u;
}

function saveFile(fileUrl, content)
{
	var r = null;
	if(saveUsingSafari)
		r = safariSaveFile(fileUrl, content);
	if((r == null) || (r == false))
		r = mozillaSaveFile(fileUrl, content);
	if((r == null) || (r == false))
		r = ieSaveFile(fileUrl, content);
	if((r == null) || (r == false))
		r = operaSaveFile(fileUrl, content);
	return(r);
}

function loadFile(fileUrl)
{
	var r = null;
	if(saveUsingSafari)
		r = safariLoadFile(fileUrl);
	if((r == null) || (r == false))
		r = mozillaLoadFile(fileUrl);
	if((r == null) || (r == false))
		r = ieLoadFile(fileUrl);
	if((r == null) || (r == false))
		r = operaLoadFile(fileUrl);
	return(r);
}

// Returns null if it can't do it, false if there's an error, true if it saved OK
function ieSaveFile(filePath, content)
{
	try
		{
		var fso = new ActiveXObject("Scripting.FileSystemObject");
		}
	catch(e)
		{
		//alert("Exception while attempting to save\n\n" + e.toString());
		return(null);
		}
	var file = fso.OpenTextFile(filePath,2,-1,0);
	file.Write(content);
	file.Close();
	return(true);
}

// Returns null if it can't do it, false if there's an error, or a string of the content if successful
function ieLoadFile(filePath)
{
	try
		{
		var fso = new ActiveXObject("Scripting.FileSystemObject");
		var file = fso.OpenTextFile(filePath,1);
		var content = file.ReadAll();
		file.Close();
		}
	catch(e)
		{
		//alert("Exception while attempting to load\n\n" + e.toString());
		return(null);
		}
	return(content);
}

// Returns null if it can't do it, false if there's an error, true if it saved OK
function mozillaSaveFile(filePath, content)
{
	if(window.Components)
		try
			{
			netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
			var file = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
			file.initWithPath(filePath);
			if (!file.exists())
				file.create(0, 0664);
			var out = Components.classes["@mozilla.org/network/file-output-stream;1"].createInstance(Components.interfaces.nsIFileOutputStream);
			out.init(file, 0x20 | 0x02, 00004,null);
			out.write(content, content.length);
			out.flush();
			out.close();
			return(true);
			}
		catch(e)
			{
			//alert("Exception while attempting to save\n\n" + e);
			return(false);
			}
	return(null);
}

// Returns null if it can't do it, false if there's an error, or a string of the content if successful
function mozillaLoadFile(filePath)
{
	if(window.Components)
		try
			{
			netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
			var file = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
			file.initWithPath(filePath);
			if (!file.exists())
				return(null);
			var inputStream = Components.classes["@mozilla.org/network/file-input-stream;1"].createInstance(Components.interfaces.nsIFileInputStream);
			inputStream.init(file, 0x01, 00004, null);
			var sInputStream = Components.classes["@mozilla.org/scriptableinputstream;1"].createInstance(Components.interfaces.nsIScriptableInputStream);
			sInputStream.init(inputStream);
			return(sInputStream.read(sInputStream.available()));
			}
		catch(e)
			{
			//alert("Exception while attempting to load\n\n" + e);
			return(false);
			}
	return(null);
}

function operaUrlToFilename(url)
{
	var f = "//localhost";
	if(url.indexOf(f) == 0)
		return url.substring(f.length);
	var i = url.indexOf(":");
	if(i > 0)
		return url.substring(i-1);
	return url;
}

function operaSaveFile(filePath, content)
{
	try
		{
		var s = new java.io.PrintStream(new java.io.FileOutputStream(operaUrlToFilename(filePath)));
		s.print(content);
		s.close();
		}
	catch(e)
		{
		if(window.opera)
			opera.postError(e);
		return null;
		}
	return true;
}

function operaLoadFile(filePath)
{
	var content = [];
	try
		{
		var r = new java.io.BufferedReader(new java.io.FileReader(operaUrlToFilename(filePath)));
		var line;
		while ((line = r.readLine()) != null)
			content.push(new String(line));
		r.close();
		}
	catch(e)
		{
		if(window.opera)
			opera.postError(e);
		return null;
		}
	return content.join("\n");
}

function safariFilenameToUrl(filename) {
	return ("file://" + filename);
}

function safariLoadFile(url)
{
	url = safariFilenameToUrl(url);
	var plugin = document.embeds["tiddlyWikiSafariSaver"];
	return plugin.readURL(url);
}

function safariSaveFile(url,content)
{
	url = safariFilenameToUrl(url);
	var plugin = document.embeds["tiddlyWikiSafariSaver"];
	return plugin.writeStringToURL(content,url);
}

// Lifted from http://developer.apple.com/internet/webcontent/detectplugins.html
function detectPlugin()
{
	var daPlugins = detectPlugin.arguments;
	var pluginFound = false;
	if (navigator.plugins && navigator.plugins.length > 0)
		{
		var pluginsArrayLength = navigator.plugins.length;
		for (pluginsArrayCounter=0; pluginsArrayCounter < pluginsArrayLength; pluginsArrayCounter++ )
			{
			var numFound = 0;
			for(namesCounter=0; namesCounter < daPlugins.length; namesCounter++)
				{
				if( (navigator.plugins[pluginsArrayCounter].name.indexOf(daPlugins[namesCounter]) >= 0) || 
						(navigator.plugins[pluginsArrayCounter].description.indexOf(daPlugins[namesCounter]) >= 0) )
					numFound++;
				}
			if(numFound == daPlugins.length)
				{
				pluginFound = true;
				break;
				}
			}
	}
	return pluginFound;
}

// ---------------------------------------------------------------------------------
// TiddlyWiki-specific utility functions
// ---------------------------------------------------------------------------------

function createTiddlyButton(theParent,theText,theTooltip,theAction,theClass,theId,theAccessKey)
{
	var theButton = document.createElement("a");
	theButton.className = "button";
	if(theAction)
		{
		theButton.onclick = theAction;
		theButton.setAttribute("href","javascript:;");
		}
	theButton.setAttribute("title",theTooltip);
	if(theText)
		theButton.appendChild(document.createTextNode(theText));
	if(theClass)
		theButton.className = theClass;
	if(theId)
		theButton.id = theId;
	if(theParent)
		theParent.appendChild(theButton);
	if(theAccessKey)
		theButton.setAttribute("accessKey",theAccessKey);
	return(theButton);
}

function createTiddlyLink(place,title,includeText,theClass)
{
	var text = includeText ? title : null;
	var btn = createTiddlyButton(place,text,null,onClickTiddlerLink,theClass);
	btn.setAttribute("refresh","link");
	btn.setAttribute("tiddlyLink",title);
	refreshTiddlyLink(btn,title);
	return(btn);
}

function refreshTiddlyLink(e,title)
{
	var subTitle, theClass = "tiddlyLink";
	if(store.tiddlerExists(title))
		{
		subTitle = store.fetchTiddler(title).getSubtitle();
		theClass += " tiddlyLinkExisting";
		}
	else
		{
		subTitle = config.messages.undefinedTiddlerToolTip.format([title]);
		theClass += " tiddlyLinkNonExisting";
		if(typeof config.shadowTiddlers[title] == "string")
			{
			subTitle = config.messages.shadowedTiddlerToolTip.format([title]);
			theClass += " shadow";
			}
		else
			subTitle = config.messages.undefinedTiddlerToolTip.format([title]);
		}
	e.className = theClass;
	e.title = subTitle;
}

function createExternalLink(place,url)
{
	var theLink = document.createElement("a");
	theLink.className = "externalLink";
	theLink.href = url;
	theLink.title = config.messages.externalLinkTooltip.format([url]);
	if(config.options.chkOpenInNewWindow)
		theLink.target = "_blank";
	place.appendChild(theLink);
	return(theLink);
}

// Event handler for clicking on a tiddly link
function onClickTiddlerLink(e)
{
	if (!e) var e = window.event;
	var theTarget = resolveTarget(e);
	var theLink = theTarget;
	var title = null;
	do {
		title = theLink.getAttribute("tiddlyLink");
		theLink = theLink.parentNode;
	} while(title == null && theLink != null);
	if(title)
		{
		var toggling = e.metaKey || e.ctrlKey;
		if(config.options.chkToggleLinks)
			toggling = !toggling;
		var opening;
		if(toggling && document.getElementById("tiddler" + title))
			story.closeTiddler(title,true,e.shiftKey || e.altKey);
		else
			story.displayTiddler(theTarget,title,null,true,e.shiftKey || e.altKey);
		}
	clearMessage();
	return(false);
}

// Create a button for a tag with a popup listing all the tiddlers that it tags
function createTagButton(place,tag,excludeTiddler)
{
	var theTag = createTiddlyButton(place,tag,config.views.wikified.tag.tooltip.format([tag]),onClickTag);
	theTag.setAttribute("tag",tag);
	if(excludeTiddler)
		theTag.setAttribute("tiddler",excludeTiddler);
	return(theTag);
}

// Event handler for clicking on a tiddler tag
function onClickTag(e)
{
	if (!e) var e = window.event;
	var theTarget = resolveTarget(e);
	var popup = Popup.create(this);
	var tag = this.getAttribute("tag");
	var title = this.getAttribute("tiddler");
	if(popup && tag)
		{
		var tagged = store.getTaggedTiddlers(tag);
		var titles = [];
		var li,r;
		for(r=0;r<tagged.length;r++)
			if(tagged[r].title != title)
				titles.push(tagged[r].title);
		var lingo = config.views.wikified.tag;
		if(titles.length > 0)
			{
			var openAll = createTiddlyButton(createTiddlyElement(popup,"li"),lingo.openAllText.format([tag]),lingo.openAllTooltip,onClickTagOpenAll);
			openAll.setAttribute("tag",tag);
			createTiddlyElement(createTiddlyElement(popup,"li"),"hr");
			for(r=0; r<titles.length; r++)
				{
				createTiddlyLink(createTiddlyElement(popup,"li"),titles[r],true);
				}
			}
		else
			createTiddlyText(createTiddlyElement(popup,"li",null,"disabled"),lingo.popupNone.format([tag]));
		createTiddlyElement(createTiddlyElement(popup,"li"),"hr");
		var h = createTiddlyLink(createTiddlyElement(popup,"li"),tag,false);
		createTiddlyText(h,lingo.openTag.format([tag]));
		}
	Popup.show(popup,false);
	e.cancelBubble = true;
	if (e.stopPropagation) e.stopPropagation();
	return(false);
}

// Event handler for 'open all' on a tiddler popup
function onClickTagOpenAll(e)
{
	if (!e) var e = window.event;
	var tag = this.getAttribute("tag");
	var tagged = store.getTaggedTiddlers(tag);
	for(var t=tagged.length-1; t>=0; t--)
		story.displayTiddler(this,tagged[t].title,null,false,e.shiftKey || e.altKey);
	return(false);
}

function createTiddlyError(place,title,text)
{
	var onclick = function(e) {
		if (!e) var e = window.event;
		var popup = Popup.create(this);
		var lines = text.split("\n");
		for(var t=0; t<lines.length; t++)
			createTiddlyElement(popup,"li",null,null,lines[t]);
		Popup.show(popup,false);
		e.cancelBubble = true;
		if (e.stopPropagation) e.stopPropagation();
		return false;
		};
	var btn = createTiddlyButton(place,title,null,onclick,"errorButton");
}

// ---------------------------------------------------------------------------------
// Animation engine
// ---------------------------------------------------------------------------------

function Animator()
{
	this.running = 0; // Incremented at start of each animation, decremented afterwards. If zero, the interval timer is disabled
	this.timerID; // ID of the timer used for animating
	this.animations = []; // List of animations in progress
	return this;
}

// Start animation engine
Animator.prototype.startAnimating = function() // Variable number of arguments
{
	for(var t=0; t<arguments.length; t++)
		this.animations.push(arguments[t]);
	if(this.running == 0)
		{
		var me = this;
		this.timerID = window.setInterval(function() {me.doAnimate(me);},5);
		}
	this.running += arguments.length;
}

// Perform an animation engine tick, calling each of the known animation modules
Animator.prototype.doAnimate = function(me)
{
	var a = 0;
	while(a < me.animations.length)
		{
		var animation = me.animations[a];
		if(animation.tick())
			a++;
		else
			{
			me.animations.splice(a,1);
			if(--me.running == 0)
				window.clearInterval(me.timerID);
			}
		}
}

// Map a 0..1 value to 0..1, but slow down at the start and end
Animator.slowInSlowOut = function(progress)
{
	return(1-((Math.cos(progress * Math.PI)+1)/2));
}

// ---------------------------------------------------------------------------------
// Zoomer animation
// ---------------------------------------------------------------------------------

function Zoomer(text,startElement,targetElement,slowly)
{
	var winWidth = findWindowWidth();
	var winHeight = findWindowHeight();
	this.element = document.createElement("div");
	this.element.appendChild(document.createTextNode(text));
	this.element.className = "zoomer";
	document.body.appendChild(this.element);
	this.startElement = startElement;
	this.startLeft = findPosX(this.startElement);
	this.startTop = findPosY(this.startElement);
	this.startWidth = Math.min(this.startElement.offsetWidth,winWidth);
	this.startHeight = Math.min(this.startElement.offsetHeight,winHeight);
	this.targetElement = targetElement;
	this.targetLeft = findPosX(this.targetElement);
	this.targetTop = findPosY(this.targetElement);
	this.targetWidth = Math.min(this.targetElement.offsetWidth,winWidth);
	this.targetHeight = Math.min(this.targetElement.offsetHeight,winHeight);
	this.progress = 0;
	this.step = slowly ? config.animSlow : config.animFast;
	//this.targetElement.style.opacity = 0;
	//this.targetElement.style.filter = "alpha(opacity:0)";
	return this;
}

Zoomer.prototype.tick = function()
{
	this.progress += this.step;
	if(this.progress > 1)
		{
		this.element.parentNode.removeChild(this.element);
		//this.targetElement.style.opacity = 1;
		//this.targetElement.style.filter = "alpha(opacity:100)";
		return false;
		}
	else
		{
		var f = Animator.slowInSlowOut(this.progress);
		this.element.style.left = this.startLeft + (this.targetLeft-this.startLeft) * f + "px";
		this.element.style.top = this.startTop + (this.targetTop-this.startTop) * f + "px";
		this.element.style.width = this.startWidth + (this.targetWidth-this.startWidth) * f + "px";
		this.element.style.height = this.startHeight + (this.targetHeight-this.startHeight) * f + "px";
		this.element.style.display = "block";
		//this.targetElement.style.opacity = this.progress;
		//this.targetElement.style.filter = "alpha(opacity:" + this.progress * 100 + ")";
		return true;
		}
}

// ---------------------------------------------------------------------------------
// Cascade animation
// ---------------------------------------------------------------------------------

function Cascade(text,startElement,targetElement,slowly)
{
	var winWidth = findWindowWidth();
	var winHeight = findWindowHeight();
	this.elements = [];
	this.startElement = startElement;
	this.startLeft = findPosX(this.startElement);
	this.startTop = findPosY(this.startElement);
	this.startWidth = Math.min(this.startElement.offsetWidth,winWidth);
	this.startHeight = Math.min(this.startElement.offsetHeight,winHeight);
	this.targetElement = targetElement;
	targetElement.style.position = "relative";
	targetElement.style.zIndex = 2;
	this.targetLeft = findPosX(this.targetElement);
	this.targetTop = findPosY(this.targetElement);
	this.targetWidth = Math.min(this.targetElement.offsetWidth,winWidth);
	this.targetHeight = Math.min(this.targetElement.offsetHeight,winHeight);
	this.progress = -1;
	this.steps = slowly ? config.cascadeSlow : config.cascadeFast;
	this.text = text;
	this.tick();
	return this;
}

Cascade.prototype.tick = function()
{
	this.progress++;
	if(this.progress >= this.steps)
		{
		while(this.elements.length > 0)
			this.removeTail();
		this.targetElement.style.position = "static";
		this.targetElement.style.zIndex = null;
		return false;
		}
	else
		{
		if(this.elements.length > 0 && this.progress > config.cascadeDepth)
			this.removeTail();
		if(this.progress < (this.steps - config.cascadeDepth))
			{
			var f = Animator.slowInSlowOut(this.progress/(this.steps - config.cascadeDepth - 1));
			var e = createTiddlyElement(document.body,"div",null,"cascade",this.text);
			e.style.zIndex = 1;
			e.style.left = this.startLeft + (this.targetLeft-this.startLeft) * f + "px";
			e.style.top = this.startTop + (this.targetTop-this.startTop) * f + "px";
			e.style.width = this.startWidth + (this.targetWidth-this.startWidth) * f + "px";
			e.style.height = this.startHeight + (this.targetHeight-this.startHeight) * f + "px";
			e.style.display = "block";
			this.elements.push(e);
			}
		return true;
		}
}

Cascade.prototype.removeTail = function()
{
	var e = this.elements[0];
	e.parentNode.removeChild(e);
	this.elements.splice(0,1);
}

// ---------------------------------------------------------------------------------
// Scroller animation
// ---------------------------------------------------------------------------------

function Scroller(targetElement,slowly)
{
	this.targetElement = targetElement;
	this.startScroll = findScrollY();
	this.targetScroll = ensureVisible(targetElement);
	this.progress = 0;
	this.step = slowly ? config.animSlow : config.animFast;
	return this;
}

Scroller.prototype.tick = function()
{
	this.progress += this.step;
	if(this.progress > 1)
		{
		window.scrollTo(0,this.targetScroll);
		return false;
		}
	else
		{
		var f = Animator.slowInSlowOut(this.progress);
		window.scrollTo(0,this.startScroll + (this.targetScroll-this.startScroll) * f);
		return true;
		}
}

// ---------------------------------------------------------------------------------
// Slider animation
// ---------------------------------------------------------------------------------

// deleteMode - "none", "all" [delete target element and it's children], [only] "children" [but not the target element]
function Slider(element,opening,slowly,deleteMode)
{
	this.element = element;
	element.style.display = "block";
	this.deleteMode = deleteMode;
	this.element.style.height = "auto";
	this.realHeight = element.offsetHeight;
	this.opening = opening;
	this.step = slowly ? config.animSlow : config.animFast;
	if(opening)
		{
		this.progress = 0;
		element.style.height = "0px";
		element.style.display = "block";
		}
	else
		{
		this.progress = 1;
		this.step = -this.step;
		}
	element.style.overflow = "hidden";
	return this;
}

Slider.prototype.stop = function()
{
	if(this.opening)
		{
		this.element.style.height = "auto";
		this.element.style.opacity = 1;
		this.element.style.filter = "alpha(opacity:100)";
		}
	else
		{
		switch(this.deleteMode)
			{
			case "none":
				this.element.style.display = "none";
				break;
			case "all":
				this.element.parentNode.removeChild(this.element);
				break;
			case "children":
				removeChildren(this.element);
				break;
			}
		}
}

Slider.prototype.tick = function()
{
	this.progress += this.step;
	if(this.progress < 0 || this.progress > 1)
		{
		this.stop();
		return false;
		}
	else
		{
		var f = Animator.slowInSlowOut(this.progress);
		var h = this.realHeight * f;
		this.element.style.height = h + "px";
		this.element.style.opacity = f;
		this.element.style.filter = "alpha(opacity:" + f * 100 +")";
		return true;
		}
}

// ---------------------------------------------------------------------------------
// Popup menu
// ---------------------------------------------------------------------------------

var Popup = {
	stack: [] // Array of objects with members root: and popup:
	};

Popup.create = function(root)
{
	Popup.remove();
	var popup = createTiddlyElement(document.body,"ol","popup","popup",null);
	Popup.stack.push({root: root, popup: popup});
	return popup;
}

Popup.onDocumentClick = function(e)
{
	if (!e) var e = window.event;
	var target = resolveTarget(e);
	if(e.eventPhase == undefined)
		Popup.remove();
	else if(e.eventPhase == Event.BUBBLING_PHASE || e.eventPhase == Event.AT_TARGET)
		Popup.remove();
	return true;
}

Popup.show = function(unused,slowly)
{
	var curr = Popup.stack[Popup.stack.length-1];
	var rootLeft = findPosX(curr.root);
	var rootTop = findPosY(curr.root);
	var rootHeight = curr.root.offsetHeight;
	var popupLeft = rootLeft;
	var popupTop = rootTop + rootHeight;
	var popupWidth = curr.popup.offsetWidth;
	var winWidth = findWindowWidth();
	if(popupLeft + popupWidth > winWidth)
		popupLeft = winWidth - popupWidth;
	curr.popup.style.left = popupLeft + "px";
	curr.popup.style.top = popupTop + "px";
	curr.popup.style.display = "block";
	addClass(curr.root,"highlight");
	if(config.options.chkAnimate)
		anim.startAnimating(new Scroller(curr.popup,slowly));
	else
		window.scrollTo(0,ensureVisible(curr.popup));
}

Popup.remove = function()
{
	if(Popup.stack.length > 0)
		{
		Popup.removeFrom(0);
		}
}

Popup.removeFrom = function(from)
{
	for(var t=Popup.stack.length-1; t>=from; t--)
		{
		var p = Popup.stack[t];
		removeClass(p.root,"highlight");
		p.popup.parentNode.removeChild(p.popup);
		}
	Popup.stack = Popup.stack.slice(0,from);
}

// Backwards compatibility
var createTiddlerPopup = Popup.create;
var scrollToTiddlerPopup = Popup.show;
var hideTiddlerPopup = Popup.remove;

// ---------------------------------------------------------------------------------
// Augmented methods for the JavaScript Number(), Array() and String() objects
// ---------------------------------------------------------------------------------

// Clamp a number to a range
Number.prototype.clamp = function(min,max)
{
	c = this;
	if(c < min)
		c = min;
	if(c > max)
		c = max;
	return c;
}

// Find an entry in an array. Returns the array index or null
Array.prototype.find = function(item)
{
	for(var t=0; t<this.length; t++)
		if(this[t] == item)
			return t;
	return null;
}

// Find an entry in an array by the value of one of it's members. Returns the array index or null
Array.prototype.findByMember = function(member,value)
{
	for(var t=0; t<this.length; t++)
		if(this[t][member] == value)
			return t;
	return null;
}

// Get an item in an array by the value of a particular member of the item. Returns the item or null
Array.prototype.get = function(member,value)
{
	for(var t=0; t<this.length; t++)
		if(this[t][members] == value)
			return this[t];
	return null;
}

// Push a new value into an array only if it is not already present in the array. If the optional unique parameter is false, it reverts to a normal push
Array.prototype.pushUnique = function(item,unique)
{
	if(unique != undefined && unique == false)
		this.push(item);
	else
		{
		if(this.find(item) == null)
			this.push(item);
		}
}

// Get characters from the right end of a string
String.prototype.right = function(n)
{
	if(n < this.length)
		return this.slice(this.length-n);
	else
		return this;
}

// Trim whitespace from both ends of a string
String.prototype.trim = function()
{
	return this.replace(/^\s*|\s*$/g,"");
}

// Convert a string from a CSS style property name to a JavaScript style name ("background-color" -> "backgroundColor")
String.prototype.unDash = function()
{
	var s = this.split("-");
	if(s.length > 1)
		for(var t=1; t<s.length; t++)
			s[t] = s[t].substr(0,1).toUpperCase() + s[t].substr(1);
	return s.join("");
}

// Substitute substrings from an array into a format string that includes '%1'-type specifiers
String.prototype.format = function(substrings)
{
	var subRegExp = new RegExp("(?:%(\\d+))","mg");
	var currPos = 0;
	var r = [];
	do {
		var match = subRegExp.exec(this);
		if(match && match[1])
			{
			if(match.index > currPos)
				r.push(this.substring(currPos,match.index));
			r.push(substrings[parseInt(match[1])]);
			currPos = subRegExp.lastIndex;
			}
	} while(match);
	if(currPos < this.length)
		r.push(this.substring(currPos,this.length));
	return r.join("");
}

// Escape any special RegExp characters with that character preceded by a backslash
String.prototype.escapeRegExp = function()
{
	return(this.replace(new RegExp("[\\\\\\^\\$\\*\\+\\?\\(\\)\\=\\!\\|\\,\\{\\}\\[\\]\\.]","g"),"\\$&"));
}

// Convert & to "&amp;", < to "&lt;", > to "&gt;" and " to "&quot;"
String.prototype.htmlEncode = function()
{
	var regexpAmp = new RegExp("&","mg");
	var regexpLessThan = new RegExp("<","mg");
	var regexpGreaterThan = new RegExp(">","mg");
	var regexpQuote = new RegExp("\"","mg");
	return(this.replace(regexpAmp,"&amp;").replace(regexpLessThan,"&lt;").replace(regexpGreaterThan,"&gt;").replace(regexpQuote,"&quot;"));
}

// Convert "&amp;" to &, "&lt;" to <, "&gt;" to > and "&quot;" to "
String.prototype.htmlDecode = function()
{
	var regexpAmp = new RegExp("&amp;","mg");
	var regexpLessThan = new RegExp("&lt;","mg");
	var regexpGreaterThan = new RegExp("&gt;","mg");
	var regexpQuote = new RegExp("&quot;","mg");
	return(this.replace(regexpLessThan,"<").replace(regexpGreaterThan,">").replace(regexpQuote,"\"").replace(regexpAmp,"&"));
}

// Process a string list of macro parameters into an array. Parameters can be quoted with "", '', [[]] or left unquoted (and therefore space-separated)
String.prototype.readMacroParams = function()
{
	var regexpMacroParam = new RegExp("(?:\\s*)(?:(?:\"((?:(?:\\\\\")|[^\"])*)\")|(?:'((?:(?:\\\\\')|[^'])*)')|(?:\\[\\[([^\\]]*)\\]\\])|([^\"'\\s]\\S*))","mg");
	var params = [];
	do {
		var match = regexpMacroParam.exec(this);
		if(match)
			{
			if(match[1]) // Double quoted
				params.push(match[1]);
			else if(match[2]) // Single quoted
				params.push(match[2]);
			else if(match[3]) // Double-square-bracket quoted
				params.push(match[3]);
			else if(match[4]) // Unquoted
				params.push(match[4]);
			}
	} while(match);
	return params;
}

// Process a string list of unique tiddler names into an array. Tiddler names that have spaces in them must be [[bracketed]]
String.prototype.readBracketedList = function(unique)
{
	var bracketedPattern = "\\[\\[([^\\]]+)\\]\\]";
	var unbracketedPattern = "[^\\s$]+";
	var pattern = "(?:" + bracketedPattern + ")|(" + unbracketedPattern + ")";
	var re = new RegExp(pattern,"mg");
	var tiddlerNames = [];
	do {
		var match = re.exec(this);
		if(match)
			{
			if(match[1]) // Bracketed
				tiddlerNames.pushUnique(match[1],unique);
			else if(match[2]) // Unbracketed
				tiddlerNames.pushUnique(match[2],unique);
			}
	} while(match);
	return(tiddlerNames);
}

// Static method to bracket a string with double square brackets if it contains a space
String.encodeTiddlyLink = function(title)
{
	if(title.indexOf(" ") == -1)
		return(title);
	else
		return("[[" + title + "]]");
}

// Static method to left-pad a string with 0s to a certain width
String.zeroPad = function(n,d)
{
	var s = n.toString();
	if(s.length < d)
		s = "000000000000000000000000000".substr(0,d-s.length) + s;
	return(s);
}

// ---------------------------------------------------------------------------------
// RGB colour object
// ---------------------------------------------------------------------------------

// Construct an RGB colour object from a '#rrggbb', '#rgb' or 'rgb(n,n,n)' string or from separate r,g,b values
function RGB(r,g,b)
{
	this.r = 0;
	this.g = 0;
	this.b = 0;
	if(typeof r == "string")
		{
		if(r.substr(0,1) == "#")
			{
			if(r.length == 7)
				{
				this.r = parseInt(r.substr(1,2),16)/255;
				this.g = parseInt(r.substr(3,2),16)/255;
				this.b = parseInt(r.substr(5,2),16)/255;
				}
			else
				{
				this.r = parseInt(r.substr(1,1),16)/15;
				this.g = parseInt(r.substr(2,1),16)/15;
				this.b = parseInt(r.substr(3,1),16)/15;
				}
			}
		else
			{
			var rgbPattern = /rgb\s*\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)/ ;
			var c = r.match(rgbPattern);
			if (c)
				{
				this.r = parseInt(c[1],10)/255;
				this.g = parseInt(c[2],10)/255;
				this.b = parseInt(c[3],10)/255;
				}
			}
		}
	else
		{
		this.r = r;
		this.g = g;
		this.b = b;
		}
	return this;
}

// Mixes this colour with another in a specified proportion
// c = other colour to mix
// f = 0..1 where 0 is this colour and 1 is the new colour
// Returns an RGB object
RGB.prototype.mix = function(c,f)
{
	return new RGB(this.r + (c.r-this.r) * f,this.g + (c.g-this.g) * f,this.b + (c.b-this.b) * f);
}

// Return an rgb colour as a #rrggbb format hex string
RGB.prototype.toString = function()
{
	var r = this.r.clamp(0,1);
	var g = this.g.clamp(0,1);
	var b = this.b.clamp(0,1);
	return("#" + ("0" + Math.floor(r * 255).toString(16)).right(2) +
				 ("0" + Math.floor(g * 255).toString(16)).right(2) +
				 ("0" + Math.floor(b * 255).toString(16)).right(2));
}

// ---------------------------------------------------------------------------------
// Augmented methods for the JavaScript Date() object
// ---------------------------------------------------------------------------------

// Substitute date components into a string
Date.prototype.formatString = function(template)
{
	template = template.replace(/YYYY/g,this.getFullYear());
	template = template.replace(/YY/g,String.zeroPad(this.getFullYear()-2000,2));
	template = template.replace(/MMM/g,config.messages.dates.months[this.getMonth()]);
	template = template.replace(/0MM/g,String.zeroPad(this.getMonth()+1,2));
	template = template.replace(/MM/g,this.getMonth()+1);
	template = template.replace(/DDD/g,config.messages.dates.days[this.getDay()]);
	template = template.replace(/0DD/g,String.zeroPad(this.getDate(),2));
	template = template.replace(/DDth/g,this.getDate()+this.daySuffix());
	template = template.replace(/DD/g,this.getDate());
	template = template.replace(/0hh/g,String.zeroPad(this.getHours(),2));
	template = template.replace(/hh/g,this.getHours());
	template = template.replace(/0mm/g,String.zeroPad(this.getMinutes(),2));
	template = template.replace(/mm/g,this.getMinutes());
	template = template.replace(/0ss/g,String.zeroPad(this.getSeconds(),2));
	template = template.replace(/ss/g,this.getSeconds());
	return template;
}

Date.prototype.daySuffix = function()
{
	var num = this.getDate();
	if (num >= 11 && num <= 13) return "th";
	else if (num.toString().substr(-1)=="1") return "st";
	else if (num.toString().substr(-1)=="2") return "nd";
	else if (num.toString().substr(-1)=="3") return "rd";
	return "th";
}

// Convert a date to UTC YYYYMMDDHHMM string format
Date.prototype.convertToYYYYMMDDHHMM = function()
{
	return(String.zeroPad(this.getFullYear(),4) + String.zeroPad(this.getMonth()+1,2) + String.zeroPad(this.getDate(),2) + String.zeroPad(this.getHours(),2) + String.zeroPad(this.getMinutes(),2));
}

// Convert a date to UTC YYYYMMDD.HHMMSSMMM string format
Date.prototype.convertToYYYYMMDDHHMMSSMMM = function()
{
	return(String.zeroPad(this.getFullYear(),4) + String.zeroPad(this.getMonth()+1,2) + String.zeroPad(this.getDate(),2) + "." + String.zeroPad(this.getHours(),2) + String.zeroPad(this.getMinutes(),2) + String.zeroPad(this.getSeconds(),2) + String.zeroPad(this.getMilliseconds(),4));
}

// Static method to create a date from a UTC YYYYMMDDHHMM format string
Date.convertFromYYYYMMDDHHMM = function(d)
{
	var theDate = new Date(parseInt(d.substr(0,4),10),
							parseInt(d.substr(4,2),10)-1,
							parseInt(d.substr(6,2),10),
							parseInt(d.substr(8,2),10),
							parseInt(d.substr(10,2),10),0,0);
	return(theDate);
}

// ---------------------------------------------------------------------------------
// DOM utilities - many derived from www.quirksmode.org 
// ---------------------------------------------------------------------------------

function drawGradient(place,horiz,colours)
{
	for(var t=0; t<= 100; t+=2)
		{
		var bar = document.createElement("div");
		place.appendChild(bar);
		bar.style.position = "absolute";
		bar.style.left = horiz ? t + "%" : 0;
		bar.style.top = horiz ? 0 : t + "%";
		bar.style.width = horiz ? (101-t) + "%" : "100%";
		bar.style.height = horiz ? "100%" : (101-t) + "%";
		bar.style.zIndex = -1;
		var f = t/100;
		var p = f*(colours.length-1);
		bar.style.backgroundColor = colours[Math.floor(p)].mix(colours[Math.ceil(p)],p-Math.floor(p)).toString();
		}
}

function createTiddlyText(theParent,theText)
{
	return theParent.appendChild(document.createTextNode(theText));
}

function createTiddlyElement(theParent,theElement,theID,theClass,theText)
{
	var e = document.createElement(theElement);
	if(theClass != null)
		e.className = theClass;
	if(theID != null)
		e.setAttribute("id",theID);
	if(theText != null)
		e.appendChild(document.createTextNode(theText));
	if(theParent != null)
		theParent.appendChild(e);
	return(e);
}

// Add an event handler
// Thanks to John Resig, via QuirksMode
function addEvent(obj,type,fn)
{
	if(obj.attachEvent)
		{
		obj['e'+type+fn] = fn;
		obj[type+fn] = function(){obj['e'+type+fn](window.event);}
		obj.attachEvent('on'+type,obj[type+fn]);
		}
	else
		obj.addEventListener(type,fn,false);
}

// Remove  an event handler
// Thanks to John Resig, via QuirksMode
function removeEvent(obj,type,fn)
{
	if(obj.detachEvent)
		{
		obj.detachEvent('on'+type,obj[type+fn]);
		obj[type+fn] = null;
		}
	else
		obj.removeEventListener(type,fn,false);
}

function addClass(e,theClass)
{
	removeClass(e,theClass);
	e.className += " " + theClass;
}

function removeClass(e,theClass)
{
	var newClass = [];
	var currClass = e.className.split(" ");
	for(var t=0; t<currClass.length; t++)
		if(currClass[t] != theClass)
			newClass.push(currClass[t]);
	e.className = newClass.join(" ");
}

function hasClass(e,theClass)
{
	var c = e.className;
	if(c)
		{
		c = c.split(" ");
		for(var t=0; t<c.length; t++)
			if(c[t] == theClass)
				return true;
		}
	return false;
}

// Resolve the target object of an event
function resolveTarget(e)
{
	var obj;
	if (e.target)
		obj = e.target;
	else if (e.srcElement)
		obj = e.srcElement;
	if (obj.nodeType == 3) // defeat Safari bug
		obj = obj.parentNode;
	return(obj);
}

// Return the content of an element as plain text with no formatting
function getPlainText(e)
{
	var text = "";
	if(e.innerText)
		text = e.innerText;
	else if(e.textContent)
		text = e.textContent;
	return text;
}

// Get the scroll position for window.scrollTo necessary to scroll a given element into view
function ensureVisible(e)
{
	var posTop = findPosY(e);
	var posBot = posTop + e.offsetHeight;
	var winTop = findScrollY();
	var winHeight = findWindowHeight();
	var winBot = winTop + winHeight;
	if(posTop < winTop)
		return(posTop);
	else if(posBot > winBot)
		{
		if(e.offsetHeight < winHeight)
			return(posTop - (winHeight - e.offsetHeight));
		else
			return(posTop);
		}
	else
		return(winTop);
}

// Get the current width of the display window
function findWindowWidth()
{
	return(window.innerWidth ? window.innerWidth : document.documentElement.clientWidth);
}

// Get the current height of the display window
function findWindowHeight()
{
	return(window.innerHeight ? window.innerHeight : document.documentElement.clientHeight);
}

// Get the current horizontal page scroll position
function findScrollX()
{
	return(window.scrollX ? window.scrollX : document.documentElement.scrollLeft);
}

// Get the current vertical page scroll position
function findScrollY()
{
	return(window.scrollY ? window.scrollY : document.documentElement.scrollTop);
}

function findPosX(obj)
{
	var curleft = 0;
	while (obj.offsetParent)
		{
		curleft += obj.offsetLeft;
		obj = obj.offsetParent;
		}
	return curleft;
}

function findPosY(obj)
{
	var curtop = 0;
	while (obj.offsetParent)
		{
		curtop += obj.offsetTop;
		obj = obj.offsetParent;
		}
	return curtop;
}

// Create a non-breaking space
function insertSpacer(place)
{
	var e = document.createTextNode(String.fromCharCode(160));
	if(place)
		place.appendChild(e);
	return e;
}

// Remove all children of a node
function removeChildren(e)
{
	while(e.hasChildNodes())
		e.removeChild(e.firstChild);
}

// Add a stylesheet, replacing any previous custom stylesheet
function setStylesheet(s,id)
{
	if(!id)
		id = "customStyleSheet";
	var n = document.getElementById(id);
	if(document.createStyleSheet) // Test for IE's non-standard createStyleSheet method
		{
		if(n)
			n.parentNode.removeChild(n);
		// This failed without the &nbsp;
		document.getElementsByTagName("head")[0].insertAdjacentHTML("beforeEnd","&nbsp;<style id='" + id + "'>" + s + "</style>");
		}
	else
		{
		if(n)
			n.replaceChild(document.createTextNode(s),n.firstChild);
		else
			{
			var n = document.createElement("style");
			n.type = "text/css";
			n.id = id;
			n.appendChild(document.createTextNode(s));
			document.getElementsByTagName("head")[0].appendChild(n);
			}
		}
}

// ---------------------------------------------------------------------------------
// End of scripts
// ---------------------------------------------------------------------------------

</script>
<style type="text/css">

#saveTest {
	display: none;
}

.zoomer {
	display: none;
}

#messageArea {
	display: none;
}

#storeArea, #copyright {
	display: none;
}

.popup {
	position: absolute;
}

</style>
<noscript>
<style type="text/css">

#storeArea {
    display: block;
    margin: 4em 10em 3em;
}

#storeArea div {
 padding: 0.5em;
 margin: 1em 0em 0em 0em;
 border-color: #f0f0f0 #606060 #404040 #d0d0d0; 
 border-style: solid; 
 border-width: 2px;
 overflow: auto;
}

#javascriptWarning {
    width: 100%;
    text-align: center;
    font-weight: bold;
    background-color: #dd1100;
    color: #fff;
    padding:1em 0em; 
}

</style>
</noscript>
</head>
<body onload="main();" onunload="if(checkUnsavedChanges) checkUnsavedChanges();">
	<script>
	if (detectPlugin("TiddlyWiki Saver"))
		{
		document.write('<embed style="display: none" name="tiddlyWikiSafariSaver" width="0" height="0" type="application/x-webkit-tiddlywiki-saver"></embed>'); 
		saveUsingSafari = true;
		}
	</script>
	<div id="copyright">
	Welcome to TiddlyWiki by Jeremy Ruston, Copyright &copy; 2005 Osmosoft Limited
	</div>
	<noscript>
		<div id="javascriptWarning">This page requires JavaScript to function properly</div>
	</noscript>
	<div id="saveTest"></div>
	<div id="contentWrapper"></div>
	<div id="contentStash"></div>
	<div id="storeArea"><div tiddler="?ALWAYS and ?SOMETIMES" modifier="JohnHughes" modified="200812091713" created="200812091713" tags="">When the same test sometimes succeeds and sometimes fails at random, thanks to for example scheduling differences, then it can be useful to repeat the same test several times. ?ALWAYS(N,Prop) and ?SOMETIMES(N,Prop) both test a property N times, succeeding either if it always passes, or if it passes at least once. Using these operations, a QuickCheck user can search for test cases that fail reliably, or fail only occasionally.</div>
<div tiddler="?LETSHRINK" modifier="JohnHughes" modified="200808280902" created="200808280902" tags="">The new macro ?LETSHRINK combines a ?LET with a ?SHRINK, in a way which makes it easier to define generators which shrink well for tree-shaped data like symbolic test cases.</div>
<div tiddler="?TIMEOUT macro" modifier="YourName" modified="200911031633" created="200911031633" tags="">?TIMEOUT(Limit,Prop) is a new form of property, that tests Prop with a timeout of Limit milliseconds. This makes it easy to find test cases that cause infinite loops or deadlocks.</div>
<div tiddler="?WHENFAIL now catches exceptions" modifier="JohnHughes" modified="200711051045" created="200711051045" tags="">Previously, ?WHENFAIL(Action,Property) did not catch exceptions raised when testing Property, with the result that the Action was performed if Property failed by returning false, but not if it failed by raising an exception. This has been changed so that //any// failure of Property causes Action to be performed.</div>
<div tiddler="Added ?TRAPEXIT" modifier="JohnHughes" modified="200711042214" created="200711042213" tags="">A change to QuickCheck's exception handling made in version 1.11 led, in some cases, to severe performance problems during shrinking. In the worst case, shrinking could become extremely slow, and allocate hundreds of megabytes of memory, perhaps even leading to an out-of-heap error. This should no longer occur with version 1.12.\n\nHowever, the performance problem can only be avoided by weakening QuickCheck's exception handling somewhat. As a result, //QuickCheck, by default, no longer catches exceptions propagated from a linked process//. When a test exits because a linked process crashes, QuickCheck will report an &quot;unhandled exit&quot;, but will not print the test case which caused the failure.\n\nThese non-local exits must now be trapped explicitly in any QuickCheck property that may provoke them. This can be done using a new macro, ?TRAPEXIT, which should be wrapped around the body of the property, inside all the ?FORALLs. Used in this way, no performance problem arises. Note that it is not necessary for the QuickCheck user to set any process flags explicitly... this is all taken care of by the ?TRAPEXIT macro.</div>
<div tiddler="Added precondition checking to run_commands" modifier="JohnHughes" modified="200706262212" created="200706262212" tags="">run_commands now checks the precondition of each command executed, as well as its postcondition. This is usually unnecessary, since command sequences generated by commands/1 are constructed so that all preconditions hold. However, if a user uses eqc:check/2 to supply a command sequence from a //different// source... such as a saved counterexample from an earlier version of the code... then a precondition might not hold when the commands are run. This error condition is now detected.</div>
<div tiddler="AssortedGenerators" modifier="JohnHughes" modified="200706262216" created="200706051503" tags="">New generators: \n* nat() for natural numbers,\n* shrink_list(L) generates the list L, then shrinks it to any sublist.\n* shrink_int(LB,UB,N) generates the integer N, then shrinks it within the given range.</div>
<div tiddler="AvoidingDuplicateTests" modifier="JohnHughes" modified="200706262220" created="200706051052" tags="">Since QuickCheck tests are generated randomly, then there is always a possibility that the same test is run more than once. This is not really a problem during normal testing, but it //can// become a problem during shrinking, which can at times run very many tests indeed. If generators try shrinking to the same value more than once, and several such generators are combined, then we can end up running the same test very many times indeed. Therefore, we may want to ensure that generators do //not// repeat values during shrinking. Since shrinking strategies are partly defined by the QuickCheck user, then the user has to take some responsibility for ensuring this.\n\nThe new property prop_shrinks_without_duplicates/1 can be used to test a generator, and see whether duplicate values occur during shrinking. If they do, then the best way to deal with it is to define the generator more carefully so that duplicates are avoided, but if this is impossible then shrink_without_duplicates/1 can be applied to the generator to filter out any repetitions. \n\nMany built-in generators have been modified to avoid duplicates. In some cases this may impose a performance penalty, although usually the result is a speed-up.</div>
<div tiddler="Bad arguments to the main eqc functions no longer cause the eqc process to exit" modifier="JohnHughes" modified="200603121406" created="200603121406" tags="">In Release 1.06, calling one of the main eqc functionsn with bad arguments caused the  eqc process to exit. Although it would be restarted the next time an eqc function was called, this did cause the test history to be lost, preventing eqc:recheck from repeating tests before the exit.</div>
<div tiddler="BugFixes" modifier="JohnHughes" modified="200601172313" created="200601172313" tags="">Several minor bugs have been fixed, including:\n* list values were not shrunk as far as they should have been\n* values returned by choose could be shrunk to values outside the proper range.</div>
<div tiddler="Changes to connection to the licence server" modifier="JohnHughes" modified="200804111746" created="200804111736" tags="">Changes have been made to the way QuickCheck connects to the licence server via a proxy. The option to enter a proxy URL interactively has been removed; instead, a proxy should always be specified by setting the HTTP_PROXY environment variable. QuickCheck now supports proxies that require authentication, using a URL of the form http:&lt;user&gt;:&lt;password&gt;@...\n\nTo ease diagnosing connection problems, QuickCheck now displays the reply from the server, if it cannot be interpreted as a licence refresh, which is usually an HTTP error message.</div>
<div tiddler="Corrected probabilities in fault injection functions" modifier="JohnHughes" modified="200711042157" created="200711042157" tags="">In previous versions, less_faulty and more_faulty set the fault rate to the wrong value. This has been corrected in version 1.12.</div>
<div tiddler="DefaultTiddlers" modifier="JohnHughes" modified="200601172335" created="200601172335" tags="">WhatsNew</div>
<div tiddler="DefaultValues" modifier="YourName" modified="200705131920" created="200705131918" tags="">When record fields have default values, it is convenient to shrink other values to the default when a test fails, so that we can see which fields are important for the test failure. The new generator functions default/2 and weighted_default/2 specify default values with this behaviour. For example, a record field generated by default(asn1_NOVALUE,int()) will either be an integer or asn1_NOVALUE, and will shrink to the latter when a test fails. default/2 chooses the default half the time--just like oneof--while weighted_default/2 chooses between the default and the other generator with the given weights, just like frequency.</div>
<div tiddler="Deprecated functions have been removed" modifier="YourName" modified="201003081149" created="201003081149" tags="">force_start, withseed\n</div>
<div tiddler="EQC_REFRESH_LICENCE_DAYS" modifier="JohnHughes" modified="200710111824" created="200710111824" tags="">This environment variable can be set to an integer value to control how many days before your cached licence becomes stale QuickCheck will try to refresh it. The default value is 10.</div>
<div tiddler="EdocDocumentation" modifier="JohnHughes" modified="200601172307" created="200601172307" tags="">edoc documentation is now available for virtually all of the QuickCheck interface.</div>
<div tiddler="Emacs mode" modifier="JohnHughes" modified="200812091707" created="200812091707" tags="">QuickCheck now provides an Emacs mode, which is a sub-mode of the Erlang mode, and provides a QuickCheck menu containing templates for many common QuickCheck tasks. To install the Emacs mode, first replace your QuickCheck installation with this version, then call eqc_emacs_mode:install() to find and update your .emacs file.</div>
<div tiddler="EqcLite" modifier="JohnHughes" modified="200601180833" created="200601172311" tags="">A new cut-down version of QuickCheck, eqc_lite, is provided, consisting of alternative implementations of the main QuickCheck modules, and an alternative header file. Code which uses QuickCheck can also be compiled using eqc_lite, but eqc_lite can only test properties when a specific test case is given using eqc:check/2. eqc_lite may be distributed to anyone, thus enabling users without a licence to run tests generated by QuickCheck, but not to generate new ones.</div>
<div tiddler="ErlangProjectStructure" modifier="JohnHughes" modified="200601172344" created="200601172304" tags="">EQC has been divided into several modules, and the modules placed in a conventional Erlang project structure, with separate directories for code, include files, and documentation. Including eqc.hrl imports all necessary functions, so code that uses QuickCheck should not be affected by this change.</div>
<div tiddler="FaultyData" modifier="YourName" modified="200705131926" created="200705131926" tags="">If we want to generate both valid and invalid test data, then it is convenient to specify possible faults together with the ordinary generators. The new generator function fault/2 makes this possible. For example, a field that should lie between 5 and 10 could be generated by fault(int(),choose(5,10)) indicating that a correct value can be generated by choose(5,10), and a (potentially) faulty one by int(). Normally, faulty cases are not generated, but if fault_rate/3 is applied to a generator containing potential faults, then each fault location will generate faulty values at the rate given. This permits the //same// generator to be used for both positive and negative testing. The new functions more_faulty/2, less_faulty/2, and no_faults provide fine control over fault generation.</div>
<div tiddler="Function calls in test data indicated by '@' are replaced by eqc_gen:eval/1" modifier="JohnHughes" modified="200608221201" created="200608221201" tags="">In previous versions of eqc, any tuples of the form {'@',Mod,Fun,Args} in generated test data were automatically replaced by the result of calling Mod:Fun(Args) before the test was run--but failing test cases were printed in the first form. This made it possible to see how test data was constructed--for example, one might see {'@',sets,new,[]} in a test case, rather than its (complicated) representation.\n\nThis feature has been removed, but a new function eqc_gen:eval/1 has been provided instead, which evaluates structures of the form {call,Mod,Fun,Args} in its argument. The difference is just that eval has to be called explicitly in properties, but on the other hand, there is now no risk of a conflict with real test data containing the atom '@'. </div>
<div tiddler="Generalised peek/1" modifier="JohnHughes" modified="200706051458" created="200706051458" tags="">peek(X) is used to peek at the value inside a sealed box, before any shrinking is applied. Previously X had to be a box; now it is permitted to be a data-structure containing boxes, and peek looks inside them all.</div>
<div tiddler="HandlingExceptionsInLinkedProcesses" modifier="JohnHughes" modified="200709201441" created="200709201438" tags="">When you link to a process, and it crashes, the exception is propagated to your own process. But these //remote exceptions// must be handled in a different way than local ones: an ordinary ''catch'' does not catch them. A bug in QuickCheck's remote exception handling caused version 1.10 to hang, and earlier versions to crash without printing or shrinking the failing case. This can no longer happen.</div>
<div tiddler="ImplicitParameters" modifier="YourName" modified="200705131724" created="200705131724" tags="">Three new functions in eqc_gen, parameter, with_parameter, and with_parameters, make it possible to parameterise generators with minimal changes to the code. All that is necessary to use an implicit parameter is to use the generator parameter(foo), for example, which generates the value of parameter foo. That value can be supplied by with_parameter, either at the top-level, or anywhere else which dynamically enclioses the use of foo. Thus a new parameter can be introduced with only two modifications to the code, even if the use is deep inside complex generators.</div>
<div tiddler="Improvements and bug fixes in eqc_commands" modifier="JohnHughes" modified="200603082337" created="200603082337" tags="">The improvements to eqc_commands are mostly in the area of shrinking: the new version should shrink generated command sequences faster, more predictably, and more reliably than before. In addition:\n* wf_commands now performs more stringent checks on the syntax of generated commands\n* a bug that caused run_commands to return the command results in reverse order has been fixed\n* the documentation has been improved</div>
<div tiddler="Incompatible change to the syntax of set in eqc_commands" modifier="JohnHughes" modified="200608221521" created="200608221519" tags="">Previously, set commands generated by eqc_commands were of the form {set,N,Mod,Fun,Args}, where N was an index identifying the variable being bound. When such variables were used in later commands, they were referred to by structures of the form {var,N}. The difference between an index in set, and the structure used later, proved to be a source of errors. The syntax of set has therefore been changed to {set,{var,N},Mod,Fun,Args}.\n\nThis change does not affect user code which generates commands using ?SET, but it may affect user code which //inspects// the generated commands, for example to validate them.</div>
<div tiddler="IntegerShrinking" modifier="JohnHughes" modified="200611282231" created="200611282231" tags="">In previous releases, large integers did not always shrink to the smallest value making the property fail. Integer shrinking has been improved to guarantee that if the result of shrinking is N, then N-1 (if N is positive) or N+1 (if N is negative) would not be a counterexample. In some cases shrinking will also be faster (although it may also be slower, since it is now searching for a more exact result).</div>
<div tiddler="John Hughes" modifier="YourName" modified="201007021505" created="200911031634" tags="">John Hughes</div>
<div tiddler="KillingQuickCheck" modifier="JohnHughes" modified="200709201445" created="200709201445" tags="">Killing the process calling quickcheck should, of course, also kill any currently running tests. A bug introduced in version 1.10 made it possible for them to continue running. This is now fixed.\n</div>
<div tiddler="Length of command sequence specified differently in eqc_statem" modifier="JohnHughes" modified="200804111759" created="200804111759" tags="">In previous versions, users of eqc_statem controlled the length of generated command sequences by generating the atom 'stop' instead of a command occasionally. This is no longer necessary: QuickCheck now controls the length of command sequences automatically, starting with short sequences and gradually increasing their length up to around 100 commands. If longer sequences are needed, they can be generated by using the new function more_commands, which can be applied to either a generator, or indeed an entire property. Old code which generates 'stop' will still work, but 'stop' will be ignored (and a deprecation message produced).</div>
<div tiddler="LicenceHandling" modifier="JohnHughes" modified="200703141726" created="200703141724" tags="">Previously, EQC licences were of fixed duration, with the expiry date compiled into the code. This version of EQC separates the licence from the code, so that we are now able to provide indefinite licences and licences for a limited number of users, and to distribute the code independently of licencing. The licence mechanism, and its implications for users, are explained in separate documentation.</div>
<div tiddler="MainMenu" modifier="JohnHughes" modified="200602010053" created="200601172335" tags="">WhatsNew\nPreviousReleases</div>
<div tiddler="Major performance improvement to eqc_statem" modifier="JohnHughes" modified="200706262207" created="200706262207" tags="">Previously, sequences generated by eqc_statem could take a long time to shrink. A number of performance improvements have been made, which together lead to a dramatic improvement. The different is particularly striking when very long sequences fail near the beginning--in such cases, shrinking is now very fast indeed. Even test cases containing thousands of commands now shrink fast.</div>
<div tiddler="McErlang integration" modifier="YourName" modified="201103021052" created="201103021050" tags="">It is now easy to use the McErlang model-checker together with QuickCheck. QuickCheck users write properties in the normal way, where the body of the property runs concurrently, and McErlang is used to explore the various schedulings of the concurrent execution. A ?MCERLANG macro is provided to make invoking McErlang easy, by analogy with the ?PULSE macro already provided. The integration can be found in the application eqc_mcerlang, which is now included with QuickCheck.\n\nNote that McErlang itself is //not// included with QuickCheck: you need to download and install it yourself from the [[McErlang site|https://babel.ls.fi.upm.es/trac/McErlang/]], where you will also find a tutorial on using McErlang and QuickCheck together.</div>
<div tiddler="MinorChanges" modifier="JohnHughes" modified="200601172333" created="200601172313" tags="">*A new macro ?WHENFAIL is provided, to make it easier to write actions to be taken when a property fails.\n*The function expectfailure has been renamed to fails, which has a more declarative ring to it.</div>
<div tiddler="MisusedProperty" modifier="JohnHughes" modified="200711042156" created="200711042156" tags="">QuickCheck provides two abstract types: properties, and generators. It can be tempting to try to //sample// a property, although it is only correct to sample a generator. In previous versions, attempting to sample a property resulted in an obscure error message. In the new version, it results in sampled data including an error message explaining that a property has been misused as a generator.</div>
<div tiddler="Modified ?SUCHTHAT to avoid infinite loops" modifier="JohnHughes" modified="200706051502" created="200706051502" tags="">Previously ?SUCHTHAT could fall into an infinite loop, if generation *never* produced a value satisfying the predicate. Now ?SUCHTHAT is limited to 100 attempts, and exits if no suitable value is found in that time. If a test fails for this reason, then it is a sign that the predicate used in ?SUCHTHAT is fulfilled too rarely, and the generator should be rewritten to avoid it.</div>
<div tiddler="New module eqc_statem for testing based on an abstract state machine" modifier="JohnHughes" modified="200609091935" created="200609091935" tags="">There is a new module, eqc_statem, for testing functions with side-effects against a specification in the form of an abstract state machine. The user defines an abstract model of the state, specifies how each command changes the state, and writes pre- and postconditions for each command under test. Lists of commands can then be generated, tested, and shrunk automatically. The new module is both faster and easier to use than eqc_commands, which it replaces. See the documentation for details.</div>
<div tiddler="New operator ?SHRINKWHILE" modifier="JohnHughes" modified="200603082345" created="200603082344" tags="">A new operator ?SHRINKWHILE is provided for situations when a generator is designed to produce values satisfying some condition, but shrinking might break this property. By &quot;shrinking while&quot; the property is true, we can avoid shrinking to values that violate it. See the documentation in eqc_gen.</div>
<div tiddler="NewQuickCheckInterface" modifier="JohnHughes" modified="200601172329" created="200601172328" tags="">eqc:quickcheck can now be called with a module and function name, or module, function name and argument list. Apart from convenience, when RepeatingFailedTests which were initially called in this way, the most recently loaded version of the property is tested. With the original interface, a repeated test calls the same code as the first test.</div>
<div tiddler="NewRepresentation" modifier="JohnHughes" modified="200612171544" created="200612171532" tags="">Hitherto, QuickCheck generators were just represented as functions. This could lead to confusion in cases where the generated data itself contains function values--a function in the data could mistakenly be interpreted as a generator, with erroneous behaviour as a result. The new representation for generators cannot be confused with functions, eliminating this problem. ''Note'': all atoms beginning with eqc_ are reserved for QuickCheck's use--among other things, for labelling generators!\n\nBecause this change affects the definitions of some of the QuickCheck macros, it is necessary to //recompile// all QuickCheck specifications. Running old code may lead to badarg errors in quickcheck_licenced--if you encounter this, recompile and reload your QuickCheck specifications.</div>
<div tiddler="Other small improvements" modifier="JohnHughes" modified="200602010132" created="200602010132" tags="">A new function pick/1 can be used to select one element from a generator.\nRandomisation using erlang:now() ensures no two runs of quickcheck use the same random number seed.</div>
<div tiddler="PreviousReleases" modifier="YourName" modified="201206181703" created="200602010052" tags="">Version 1.25 was not released\n[[Release 1.24]]\nVersion 1.23 was not released\n[[Release 1.22]]\nVersion 1.21 was not released.\n[[Release 1.20]]\n[[Release 1.19]]\n[[Release 1.18]]\nVersion  1.17 was not released.\n[[Release 1.16]]\n[[Release 1.15]]\n[[Release 1.14]]\n[[Release 1.13]]\n[[Release 1.12]]\n[[Release 1.11]]\n[[Release 1.10]]\n[[Release 1.09]]\n[[Release 1.08]]\n[[Release 1.07]]\n[[Release 1.06]]\n[[Release1.05]]\n[[Release1.04]]\n[[Release1.03]]</div>
<div tiddler="QuickCheck is now reentrant" modifier="JohnHughes" modified="200705271357" created="200705271357" tags="">That is, it is now possible to call quickcheck, counterexample, etc from properties. In previous versions, attempting to do so would lead to deadlock. Making QuickCheck reentract simplifies testing QuickCheck with QuickCheck, but also lays the groundwork for other functionality to be added later.</div>
<div tiddler="Release 1.06" modifier="JohnHughes" modified="200608221206" created="200608221206" tags="">* ?SHRINKWHILE added to eqc-lite.\n* Improvements to shrinking in eqc_commands</div>
<div tiddler="Release 1.07" modifier="JohnHughes" modified="200611282222" created="200603121404" tags="">* [[New module eqc_statem for testing based on an abstract state machine]]\n* [[eqc_commands has been removed]]\n* [[Bad arguments to the main eqc functions no longer cause the eqc process to exit]]. \n* [[Function calls in test data indicated by '@' are replaced by eqc_gen:eval/1]]\n* Bad arguments to generator functions are now reported only if the generator is actually used.\n* Improvements to make shrinking more predictable.\n* Small optimisation to sealed generators</div>
<div tiddler="Release 1.08" modifier="JohnHughes" modified="200703141720" created="200611282229" tags="">* Adopted a NewRepresentation for generators. \n//IMPORTANT: requires recompilation of all QuickCheck specifications//.\n* Added numtests to control the number of tests run.\n* Improved IntegerShrinking to be more consistent.\n* Added a way to stop the QuickCheck server.\n* Added the ability to TimeoutGenerators.\n* Fixed a bug in sample, which made it less random than intended.\n* Tidied the information in some rare error messages.\n* Changed the [[treatment of exceptions during shrinking]].\n* Fixed  [[a bug in the QuickCheck server provoked when the process that invoked QuickCheck crashes]].</div>
<div tiddler="Release 1.09" modifier="YourName" modified="200705131642" created="200703141722" tags="">* New LicenceHandling.\n* Improved error message when a property returns the wrong type of value.</div>
<div tiddler="Release 1.10" modifier="JohnHughes" modified="200709201434" created="200705131718" tags="">* Added generators for FaultyData.\n* Added generators for DefaultValues.\n* [[Major performance improvement to eqc_statem]].\n* Added support for AvoidingDuplicateTests.\n* [[Added precondition checking to run_commands]].\n* [[Unlicenced users may now use check/2]]\n* Added ImplicitParameters to generators. \n* Added [[eval/2]], for evaluating symbolic expressions containing variables.\n* Added AssortedGenerators..\n* [[QuickCheck is now reentrant]]\n* [[Modified ?SUCHTHAT to avoid infinite loops]].\n* Optimised some of the built-in generators to shrink faster and more predictably.\n* [[Generalised peek/1]] slightly.</div>
<div tiddler="Release 1.11" modifier="JohnHughes" modified="200711042140" created="200709201435" tags="">Version 1.11 is mainly a bug-fixing release, with a few additions to  shell API.\n* Added [[eqc:module]]\n* Added [[eqc:backtrace]]\n* Fixed a [[bug in licence checking]]\n* Added EQC_REFRESH_LICENCE_DAYS environment variable\n* Fixed a [[performance bug in the list generator]]\n* Fixed a bug in HandlingExceptionsInLinkedProcesses\n* Fixed a bug preventing KillingQuickCheck\n* Fixed a [[bug in elements]]</div>
<div tiddler="Release 1.12" modifier="JohnHughes" modified="200804111729" created="200711042145" tags="">* ''Important:'' [[Added ?TRAPEXIT]], fixing a serious performance bug in shrinking.\n* [[Corrected probabilities in fault injection functions]].\n* Improved error message for MisusedProperty.\n* [[?WHENFAIL now catches exceptions]] in its second argument.</div>
<div tiddler="Release 1.13" modifier="JohnHughes" modified="200808271850" created="200804111735" tags="">Version 1.13 makes a number of small but useful changes.\n* A new function [[postconditions]] has been added to eqc_statem.\n* [[Shrinking improvements in eqc_statem]].\n* [[Length of command sequence specified differently in eqc_statem]].\n* [[Changes to connection to the licence server]].\n* Some performance bugs that could cause very slow shrinking have been fixed.</div>
<div tiddler="Release 1.14" modifier="JohnHughes" modified="200812091641" created="200808271911" tags="">Version 1.14 introduces a number of major new features. The most significant of these is //support for floating licences//. In fact, the licencing code has been completely replaced in this version, and as a result this version can //only// be used with floating licences. Support for fixed licences will be reintroduced in version 1.15.\n\nTo learn how to use Quviq floating licences, read the accompanying document //Quviq Floating Licences, Users' Guide//.\n\nThis version also introduces support for integration with Common Test. The new module eqc_ct can be used to convert any Erlang module containing QuickCheck properties into a Common Test test suite.\n\nThe new module eqc_socket makes it easy to test external software over a socket interface. Eqc_socket lets you create a process interface to the socket, automatically recording a trace of communication, and can be used together with eqc_statem to build a model of the system under test.\n\nOther improvements are:\n* a new version of [[zip in eqc_statem]] makes it easier to interpret the output from failed tests.\n* added a [[?LETSHRINK]] macro to make it easier to define shrinking strategies for tree-structured data\n</div>
<div tiddler="Release 1.15" modifier="YourName" modified="200903160853" created="200812091655" tags="">Version 1.15 reintroduces support for non-floating (fixed) licences, using the same framework as floating licences. See //Quviq Licences, Users' Guide// for information on how to administer and use both kinds of licence.\n\n''New Features''\n* QuickCheck now includes an [[Emacs mode]].\n* New ways to collect statistics: [[aggregate, measure, and command_names]]\n* New properties for non-deterministic tests: [[?ALWAYS and ?SOMETIMES]]\n* [[?LETSHRINK]], making recursive generators easier to define\n* QuickCheck now appears to be [[an OTP application]]\n* New function [[is_generator]]\n\n''Licencing''\n* [[force_start() is no longer needed]]\n* Licences accidentally left in a locked state can be unlocked with eqc:unlock_licence()\n* eqc:active_users() is provided to find out who in your licence group is currently using QuickCheck\n\n''Documentation''\n* A //Ready reference sheet// is now included with QuickCheck.\n</div>
<div tiddler="Release 1.16" modifier="YourName" modified="200911021508" created="200903160856" tags="">''eqc_fsm''\nThe big news in release 1.16 is the addition of a module for testing finite state machines, eqc_fsm. With the help of this module, FSM specifications become easier to write, and QuickCheck can even help assign suitable weights to the transitions. If you need to write specifications based on FSM diagrams or statecharts, then eqc_fsm will make your job a lot easier. There is extensive documentation in the reference manual, and a simple example of its use in the //examples// folder distributed with this version of QuickCheck. This folder also contains some introductory examples to help new users get started.\n\n''Other New Features''\n* A new function eqc:counterexamples() returns the counterexamples found by eqc:module.\n* A new function eqc:start/1 takes a boolean argument, to determine whether to stop another instance of QuickCheck, if there is one running.\n* QuickCheck tests are now run in the same process group as the caller (which affects where output appears)\n* eqc_statem now accepts a parameterised module as the call-back module.\n* New generators for binaries are provided in eqc_gen.\n* eqc_ct provides a new function compile_mods to compile a //list// of modules, which can be invoked from the command line using erl -s.\n\n''Remember to run eqc_emacs_mode:install() once you have installed 1.16 in your path, to update your emacs mode to refer to the new version.''</div>
<div tiddler="Release 1.18" modifier="YourName" modified="201003081137" created="200911021507" tags="">The major news in release 1.18 is the addition of three new modules:\n* [[eqc_c]]--to enable testing of C code from QuickCheck\n* [[pulse]]--a randomising scheduler for race condition testing\n* [[eqc_grammar]]--for generating test data from grammars\nThere is also a new [[?TIMEOUT macro]] for defining properties with timeouts.\n\nIn addition, the following bugs have been fixed:\n* In eqc_fsm state machines, a failing precondition could sometimes lead to an infinite loop in test case generation.\n* In eqc_fsm, the automated weight assignment has been improved.\n* In eqc, collect and aggregate ignored the empty list.\n* The distribution of real numbers generated by real() has been improved to generate integers and equal values more often.\n* All dependence on gs has been removed--formerly, this caused QuickCheck to crash instead of reporting some start-up problems, if gs were not installed.\nDon't forget to run eqc_emacs_mode:install() after installing the new version of QuickCheck, to add menus for the new features to your QuickCheck Emacs mode.\n\nThis release has been tested under both R12B and R13B.</div>
<div tiddler="Release 1.19" modifier="YourName" modified="201007021407" created="201003081149" tags="">New features in release 1.19.\n\n''eqc''\n\nWriting properties\n* eqc_statem can now generate [[parallel test cases]] to test for race conditions\n* eqc now supports [[conjunction of properties]]\n* A new function [[equals/2 simplifies equality properties]]\n* A generator for bit strings has been added\n\nTesting properties\n* It is now possible to obtain [[partially shrunk counterexamples]], either while shrinking continues, or after interrupting it\n* It is now possible to [[capture and handle all QuickCheck output and all tests run]]\n* It is now possible to [[customize the presentation of statistics over collected data]]\n* The [[behaviour of recheck]] has changed\n* eqc:module can now take a parameter specifying the number of tests to run\n\nOther\n* [[Some deprecated functions have been removed]]\n\n''eqc_c''\n* eqc_c now provides access to C global variables\n* eqc_c:start now takes an &quot;exec_command_line&quot; option that can be used to run the C code under valgrind\n* The handling of C arrays in eqc_c has improved\n* eqc_c now provides C type information\n* eqc_c now supports C closures\n\n''PULSE''\n* PULSE now handles code with timeouts\n* PULSE now handles monitors as well as links\n* PULSE verbosity now defaults to no output\n\n\n\n</div>
<div tiddler="Release 1.20" modifier="YourName" modified="201009211326" created="201007021431" tags="">''eqc''\n\nReliability\n* This new version of QuickCheck supports //redundant licence servers//: if the master server is down, then QuickCheck will download its activation from a slave server managed by a different service provider instead, This should eliminate the occasional downtime some customers have experienced in recent months. For this reason, we strongly urge all customers using older versions to install and use this release.\n* Bug fixes to recheck (which previously failed given just a boolean instead of a property), and conjunction (which generated shrunk counterexamples that could not be reexecuted by eqc:check).\n\nWriting Properties\n* A new module [[eqc_temporal]] supports testing systems with //asynchronous events//.\n* A new module [[eqc_symbolic]] supports the creation and execution of //symbolic test cases//, useful for testing data structure libraries, for example.\n* New generators for list permutations (''shuffle'') and for non-empty lists (''non_empty'') are included in eqc_gen.\n\nUseability\n* Better error messages when oneof and frequency are misused.\n* Compile-time warnings if QuickCheck features are used that are not supported by the installed version. This may happen if a full QuickCheck specification is compiled with only eqcmini installed.\n\n''eqc_ct''\nCommon Test users can now include init_per_suite, init_per_testcase, end_per_suite and end_per_testcase definitions in QuickCheck suites; they will be copied to the files generated by eqc_ct.\n\n''eqc_c''\nImprovements to eqc_c:\n* keywords inline and restrict are now handled\n* const qualifiers are now ignored\n*  __  __attributes__  __ are now preserved on global variables and function definitions.\n* multiple {include_functions,...} and {exclude_functions,...} options are now supported.\n* some C parsing problems have been fixed.\n\n''PULSE''\nA bug in the instrumenter previously made it impossible to instrument local function calls as side-effects. This has been fixed.</div>
<div tiddler="Release 1.22" modifier="YourName" modified="201103011623" created="201009211329" tags="">This is a minor release with a few bug fixes, mostly to parallel_commands. Also, parallel test case generation has been added to eqc_fsm, in the same way as it was previously added to eqc_statem.\n\nThe following bugs have been fixed:\n* parallel_commands could sometimes generate invalid test cases\n* parallel_commands did not work under R12B\n* parallel_commands generated purely sequential test cases too often\n* process_flag sensitive was accidentally set inside ?TRAPEXIT, preventing tracing of user code\n\n</div>
<div tiddler="Release 1.24" modifier="YourName" modified="201206181703" created="201103011651" tags="">The major new features in this version of QuickCheck are:\n* [[Test suite generation]]\n* [[McErlang integration]]\nAlso particularly important features are:\n* [[an installer for QuickCheck]]\n* [[running tests for a given time]]\n* [[new approach to version numbering]]\nOther extensions to eqc are:\n* A new property ?ONCEONLY, that can be used to avoid running the same test more than once.\n* The non_empty generator now excludes the empty tuple (as well as the empty list and the empty binary).\n* The process flag //sensitive// could formerly be wrongly turned on in user code during shrinking, preventing tracing. This has been fixed.\n* eqc_fsm now supports parameterised call-back modules, and provides state_after/2 just like eqc_statem.\n* The memory used to collect statistics during testing has been reduced.\n* numtests(0,...) used to run one test! Now it runs zero.\n* conjunction used to run the ?WHENFAIL code in //all// conjuncts when reporting a failed test. It now only runs the code in //failing// conjuncts (which clarifies output in some cases).\n* A wrong return type from run_parallel_commands has been fixed.\nExtensions to eqc_c are:\n* A new function alloc/1 to allocate zeroed memory.\n* Changes to support a C compiler installed in Program Files (or any other directory with a space in its name) under Windows.\n* Improved error messages and documentation.\n* Support for empty structs.\n* Bug fix: prevent QuickCheck from shutting down (because it is idle) while C code is running under eqc_c.\n\n\n</div>
<div tiddler="Release1.03" modifier="JohnHughes" modified="200602010051" created="200601172256" tags="">This version of QuickCheck is tidied up and documented, but the major novelties are new features for repeating and saving test cases, and [[exporting test cases]] to non-QuickCheck users.\n\nRepeatingFailedTests\nSavingCounterExamples\nEqcLite\nEdocDocumentation\nErlangProjectStructure\nNewQuickCheckInterface\nVersionNumbering\nMinorChanges\nBugFixes</div>
<div tiddler="Release1.04" modifier="JohnHughes" modified="200603082330" created="200602010112" tags="">A new module [[eqc_commands]] simplifies testing code with side-effects.\n[[Shrinking is much faster]] for large test cases.\nA new function [[watch_shrinking]] helps both to achieve good shrinking, and to identify the reason why a test fails.\nNew feature: [[Sealing and opening generators]] provides control over shrinking order.\n[[Other small improvements]]</div>
<div tiddler="Release1.05" modifier="JohnHughes" modified="200603100954" created="200603082334" tags="">[[Improvements and bug fixes in eqc_commands]]\n[[eqc runs in a separate process]]\n[[Validation of command line arguments]]\n[[New operator ?SHRINKWHILE]]</div>
<div tiddler="RepeatingFailedTests" modifier="JohnHughes" modified="200601172340" created="200601172322" tags="">Tests which fail can now easily be repeated--after turning on tracing, for example--by calling eqc:recheck/0 or eqc:recheck/1. If the NewQuickCheckInterface is used to run the tests initially, then repeating a test calls recompiled code if any has been loaded.</div>
<div tiddler="SavingCounterExamples" modifier="JohnHughes" modified="200601172342" created="200601172320" tags="">Counterexamples found by QuickCheck can now easily be saved and re-used. eqc:counterexample/0 returns the last failed test case, while counterexample/1 tests a property and returns a counterexample, if one is found. Counterexamples can be reused using the new function eqc:check/2, which tests (the same or a different property) in a given test case. Tests using check can be run by users who do not have QuickCheck -- they only need EqcLite.</div>
<div tiddler="Sealing and opening generators" modifier="JohnHughes" modified="200602010130" created="200602010128" tags="">Two new generator functions, seal and open, enable the programmer to optimise the search order during shrinking. Sealing a generator delays exploration of its possible shrinkings until the seal is opened--in the meantime, the sealed value can be built into larger structures, which are shrunk //first//. For example, by generating a list with sealed elements, defining shrinking that discards elements using ?SHRINK, and then opening the resulting list, we ensure that shrinking will try to discard elements before exploring all the ways in which each element might be shrunk. Sealing is likely to be important when generating large structures with many random components.</div>
<div tiddler="Shrinking improvements in eqc_statem" modifier="JohnHughes" modified="200804111755" created="200804111755" tags="">The improvements made strengthen shrinking so that, occasionally, commands can be deleted from the command list that would not have deleted by previous versions.</div>
<div tiddler="Shrinking is much faster" modifier="JohnHughes" modified="200602010118" created="200602010118" tags="">In version 1.03, test cases that could be shrunk in very many different ways were shrunk very slowly. Typically, large test cases with many generated components were extremely slow to shrink. The representation of generators has been optimised to avoid this problem. Such test cases may still be shrunk very many times, but each shrinking step is much, much faster, leading to much better performance overall.</div>
<div tiddler="ShrinkingFixedListsAndIntegers" modifier="JohnHughes" modified="200706262215" created="200706262215" tags="">The new generators shrink_int and shrink_list generate the constant integer or list they are given--but then //shrink// that fixed value in the usual way. Integers shrink towards smaller absolute values, and lists shrink by dropping elements.</div>
<div tiddler="SiteSubtitle" modifier="YourName" modified="201206181706" created="200601172255" tags="">version 1.26</div>
<div tiddler="SiteTitle" modifier="JohnHughes" modified="200601172255" created="200601172255" tags="">EQC Release Notes</div>
<div tiddler="Some deprecated functions have been removed" modifier="YourName" modified="201003081216" created="201003081210" tags="">The following functions, which served no useful purpose, have been removed to simplify the API a little.\n\n* ?SHRINKWHILE(X,G,P) has been removed--use ?SUCHTHAT(X,G,P) instead\n* include_if(P,A) has been removed--use [A || P] instead\n* withseed(Seed,P) has been removed. Use eqc:recheck to repeat a test with the same seed, or (better) use eqc:check to repeat a test with a previous counterexample\n* eqc:force_start has been removed--use eqc:start instead</div>
<div tiddler="Test suite generation" modifier="YourName" modified="201103021041" created="201103021033" tags="">QuickCheck can now generate a //fixed test suite// from a property, and later run the test suite without using a QuickCheck licence. Test suites can be generated at random, or by generating //minimal// test suites that achieve the same coverage as a long sequence of random tests. Coverage can be measured by the Erlang/OTP cover tool, or with respect to user-defined &quot;features&quot;. There are two interesting ways to use this:\n* Generate a test suite for distribution to others who do not have a QuickCheck licence; they will still be able to run the fixed tests.\n* Generate a small test suite with high coverage, for use during regular testing in conjunction with random QuickCheck tests.\nThe new functionality is in the module eqc_suite.</div>
<div tiddler="TimeoutGenerators" modifier="JohnHughes" modified="200611282232" created="200611282232" tags="">The generator timeout(T,G) generates the same thing as G, but generates the atom timeout if generation takes longer than T milliseconds. The same time limit also applies to the shrinking steps.</div>
<div tiddler="Unlicenced users may now use check/2" modifier="JohnHughes" modified="200706262250" created="200706262250" tags="">The function check(Property,TestCase), which tests a property in a given specified case, may now be called by users who do not have a QuickCheck licence. This enables licenced users to generate test cases using QuickCheck, and then give the properties and test cases to unlicenced users, who will even so be able to run them. This functionality was previously supported by EqcLite, which is now no longer necessary. EqcLite is thus no longer supported.</div>
<div tiddler="Validation of command line arguments" modifier="JohnHughes" modified="200603082342" created="200603082342" tags="">The arguments to functions in eqc are now validated //before// testing starts, leading to much less obscure error messages when validation fails.</div>
<div tiddler="VersionNumbering" modifier="JohnHughes" modified="200601172323" created="200601172323" tags="">eqc now has version numbers (which have already reached 1.03!).</div>
<div tiddler="WhatsNew" modifier="YourName" modified="201206181705" created="201206181705" tags="">This version of QuickCheck includes many bug fixes, as well as major improvements to pulse and significant improvements to eqc_statem/eqc_fsm. Moreover, licenced users can now run as many QuickCheck instances as they wish.\n\n''pulse''\nThe pulse implementation and documentation are much improved; pulse now instruments many more of the Erlang primitives, and is thoroughly tested for compatibility with the VM. Instrumented versions of many OTP behaviours are now available at https://github.com/Quviq/pulse_otp, which can be used in conjunction with pulse to test client modules. In addition, it is now possible to mix instrumented and uninstrumented code in the same test, in many cases. In particular, it is possible to use pulse to test an instrumented client together with an uninstrumented server, thus obviating the need to instrument the //entire// system under test, in many cases.\n\n* source locations are now tracked.\n* pulse_instrument finds beam files even if they are not in the CWD, no longer silently ignores syntax errors, and no longer requires export_all.\n* a new instrumentation option pulse_replace_module replaces pulse_call.\n* pulse_no_side_effect lets you override the primitive side effects.\n* new options to pulse:run, including a strategy option that can be used to provoke hard-to-find races.\n* The timeout for tests run under pulse can now be configured using application:set_env(pulse,timeout,T).\n\n''eqc_statem/eqc_fsm''\n* Both modules now support an invariant/1 callback, which can be used to check invariants on the state during a test.\n* Both modules now support a dynamic_precondition/2 callback, which can be used to check preconditions that can only be tested during test execution.\n* Symbolic calls in the result of next_state/3 could occasionally lead to exponential growth of the symbolic state; this has been fixed.\n* eqc_fsm now provides a state_after/2 function, just like eqc_state,.\n* The weight optimisation algorithm in eqc_fsm has been refined to avoid numerical instability, which could formerly sometimes cause singular_matrix exceptions.\n* The default image viewer on the Mac is now &quot;open&quot;, enabling QuickCheck to display FSM state machine diagrams without user intervention.\n\n''eqc''\n* recheck/1 now works across crashes of the VM.\n* disjunction/1 of properties is now available.\n* ?SOMETIMES, ?ALWAYS and check/2 now set the parameter repeated to true for second and subsequent tests (occasionally useful in generators with side-effects).\n* A minor improvement in the behaviour of ?SOMETIMES.\n* Bug fixes:\n** For a few releases, QuickCheck could start with the same random seed every time.\n** Compatibility with R15B.\n** Displaying distributions collected by collect or aggregate could occasionally provoke a badarg exception from io:format.\n** testing_time/2 did not work correctly in combination with recheck/1.\n** conjunction/1 could occasionally crash during shrinking.\n** QuickCheck could sometimes shut down because of 'idleness' during the execution of a very long-running test.\n\n''eqc_gen''\n* A bug in bitstring/1 has been fixed.\n* maybe/1 has been removed.\n\n''eqc_symbolic''\n* call_names/1 has been added to extract the list of function names in symbolic calls from a term.\n\n''eqc_c''\nSpeed improvements--the generated code is now faster to compile. In particular, we avoid a quadratic compile-time with gcc!\nalloc/1 has been added to eqc_c.hrl.\ncppflags are now passed to the C compiler, as well as to cpp.\n\n''Licence checking''\n* updated for compatibility with R15B.\n* uses a new environment variable EQC_PROXY, which takes precedence over HTTP_PROXY if it is set.\n* permits multiple simultaneous QuickCheck instances under the same user id.\n* reimplemented locking of the licence files, which should ensure that they are never left in a locked state longer than one minute--users should never need to unlock licence files manually.</div>
<div tiddler="YourName" modifier="YourName" modified="201007021505" created="201007021505" tags="">John Hughes</div>
<div tiddler="a bug in the QuickCheck server provoked when the process that invoked QuickCheck crashes" modifier="JohnHughes" modified="200702101358" created="200702101358" tags="">Previously, if the shell from which QuickCheck was first invoked crashed, then QuickCheck itself crashed later in io:format--trying to send output to the shell which no longer exists. The same behaviour could arise under the Common Test server. The bug has been fixed by ensuring that the QuickCheck server will be terminated if its spawning process dies.</div>
<div tiddler="aggregate, measure, and command_names" modifier="JohnHughes" modified="200812091711" created="200812091711" tags="">Hitherto the only way to collect statistics during QuickCheck testing was using the collect function, which collects one value per test, and displays a histogram of the collected values when testing is over. This version adds two new useful functions:\n* //aggregate// collects //many// values per test, and displays a histogram over all the aggregated values,\n* //measure// collects numeric values, and displays minimum, maximum, total, count, and average.\nA new function //command_names// in eqc_statem makes it very easy to collect the distribution of commands actually run during state-machine testing: just add\n\naggregate(command_names(Cmds),...)\n\nto your property.</div>
<div tiddler="an OTP application" modifier="JohnHughes" modified="200812091715" created="200812091715" tags="">The QuickCheck installation now includes a .app file, allowing QuickCheck to be started and stopped using application:start(eqc) and application:stop(eqc), if desired. However, QuickCheck is not a real application, it simply creates a dummy application structure which makes systools happy.</div>
<div tiddler="an installer for QuickCheck" modifier="YourName" modified="201103021055" created="201103021055" tags="">To ease installation, especially for new users, there is now an installer included with QuickCheck -- eqc_install.beam. The installer should work on all platforms, but note it must usually be run as the superuser/Administrator. Consult README.txt before using it.</div>
<div tiddler="behaviour of recheck" modifier="YourName" modified="201003081339" created="201003081338" tags="">In previous versions of QuickCheck, recheck() repeated the last test //including the shrinking search//, and recheck(//N//) repeated the //N//-th last test. However, this only worked properly if the test to be repeated was invoked using quickcheck/2, or counterexample/2, which were provided for this purpose. All of these functions have been replaced by\n\nrecheck(Property)\n\nwhich tests Property using //the same random seed as the last failed test//. Provided Property is the same property that was previously tested, then this will repeat the previous test, including its shrinking. This new API is both simpler and more reliable than its predecessor.\n\n''Summary''\nTo repeat a failed test run by\n\neqc:quickcheck(P)\n\nrun\n\neqc:recheck(P)</div>
<div tiddler="bug in elements" modifier="JohnHughes" modified="200709201448" created="200709201447" tags="">Calling elements([]) is an error: of course, no element can be generated. A bug introduced in version 1.08 meant that the error was not reported properly--instead a useless function value was generated. This is now fixed.</div>
<div tiddler="bug in licence checking" modifier="JohnHughes" modified="200710111822" created="200710111822" tags="">In previous versions, attempting to refresh the cached licence with no internet connection available caused QuickCheck to crash. The correct behaviour, now implemented, is of course to start QuickCheck anyway provided the cached licence is still valid.</div>
<div tiddler="capture and handle all QuickCheck output and all tests run" modifier="YourName" modified="201003081307" created="201003081307" tags="">New property functions on_output and on_test allow the user to supply functions to be called instead of io:format for generating output, and on each test success or failure. These can be used, for example, to redirect QuickCheck output to a file, to run QuickCheck silently, or to collect all the test cases run during shrinking.</div>
<div tiddler="conjunction of properties" modifier="YourName" modified="201003081234" created="201003081233" tags="">eqc now provides a function conjunction/1 for combining a list of (tagged) properties. This is semantically similar to combining the properties with andalso, but allows general QuickCheck properties containing collect, aggregate, ?FORALL, ?WHENFAIL etc etc. \n\nFor example, testing\n\neqc:conjunction([{xy,?FORALL({X,Y},{nat(),nat()},equals(X,Y))},{ab,?FORALL({A,B},{nat(),nat()},equals(A,B))}]).\n\nyields\n\n...Failed! After 4 tests.\nxy: passed\n{1,1}\n1 /= 1\nab: failed\n{0,1}\n0 /= 1\nShrinking.(1 times)\nab: failed\n{0,1}\n0 /= 1\n\nOnly the failing conjunct generates output after shrinking.</div>
<div tiddler="customize the presentation of statistics over collected data" modifier="YourName" modified="201003081332" created="201003081332" tags="">collect and aggregate can now be given an extra parameter, a printing function which is called with the collected data as its argument. If all you want to do is to add a title to the usual output, then this can be done by supplying with_title(T) as the printing function.</div>
<div tiddler="eqc runs in a separate process" modifier="JohnHughes" modified="200603082341" created="200603082341" tags="">All eqc functions now run in a separate eqc process rather than the shell, which performs a licence check once only when it is started. The first time any function in eqc is called, the current licence is printed before the function is run. In this version the licence simply checks the expiration date.</div>
<div tiddler="eqc:backtrace" modifier="JohnHughes" modified="200710111836" created="200710111835" tags="">When a QuickCheck property fails because an exception is raised, a stack trace is recorded. It can be displayed by calling eqc:backtrace().</div>
<div tiddler="eqc:module" modifier="JohnHughes" modified="200710111830" created="200710111830" tags="">The function eqc:module(M), intended for use in the shell, runs eqc:quickcheck on all properties in the module M. By definition, properties are exported functions whose names begin with ''prop_''.</div>
<div tiddler="eqc_c" modifier="YourName" modified="200911091817" created="200911021515" tags="">This new module makes it easy to call C code from QuickCheck properties.  Calling eqc_c:start(file) compiles and loads the definition in file.c, making them available directly in the Erlang shell. For example, if file.c contains\n\nint plus(int x, int y) { return x+y; }\n\nthen after starting this file, we can call file:plus(2,3) and get 5. Most C types can be passed to and from Erlang, structs become Erlang records, and so on. The C code actually runs in a separate operating-system process over a port, so cannot corrupt the Erlang VM.\n\neqc_c has been tested using gcc as the C compiler, under Ubuntu (9.04), OpenSUSE, OpenSolaris, and Windows Vista (with both Cygwin and MinGW). If you use a different platform and encounter difficulties, such as C header files that cannot be parsed, then do let us know!</div>
<div tiddler="eqc_commands" modifier="JohnHughes" modified="200602010115" created="200602010115" tags="">eqc_commands is intended for testing APIs with side effects. Programmers generate test cases represented by lists of commands, which can either invoke the API or check assertions. Support is provided to generate such lists, run them, check their validity, and shrink them effectively.</div>
<div tiddler="eqc_commands has been removed" modifier="JohnHughes" modified="200609091936" created="200609091936" tags="">Use eqc_statem instead: it is an improvement in every respect.</div>
<div tiddler="eqc_grammar" modifier="YourName" modified="200911021527" created="200911021527" tags="">eqc_grammar can take a yecc grammar and use it to generate random strings or random syntax trees conforming to the grammar.</div>
<div tiddler="eqc_symbolic" modifier="YourName" modified="201007021504" created="201007021504" tags="">When testing data-structures, it's often more interesting to know //how a data-structure was built//, than what its value is. For example, if testing the sets library, it is more useful to know that a property failed for sets:new(), than that it failed for \n\n{set,0,16,16,8,80,48,{[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},{{[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]}}}\n\nTo support this, we generate test cases in a //symbolic// form, representing this example as {call,sets,new,[]} rather than the actual value. eqc_symbolic supports this approach, providing functions to help generate symbolic tests, evaluate them, and pretty-print them.</div>
<div tiddler="eqc_temporal" modifier="YourName" modified="201007021514" created="201007021513" tags="">Asynchronous systems are hard to test using state machines alone, because the asynchronous events occur independently of the state transitions, at unpredictable times during the test. A good way to test these systems is to use a state machine to exercise the SUT, and record a trace of events during the test for analysis at the end of each test case. Yet writing analysers for recorded traces can become very complex in itself. eqc_temporal provides a new datatype with a rich set of operations tailored for this purpose, which can greatly simplify writing simple and robust specifications of trace verifiers.\n\nThe approach is novel, and so far, unique to Quviq. The module documentation includes a simple example; a longer case study has been published at Automation of Software Test 2010 as //Using Temporal Relations to Specify and Test an Instant Messaging Server//, by John Hughes, Ulf Norell, and Jérôme Sautret.</div>
<div tiddler="equals/2 simplifies equality properties" modifier="YourName" modified="201003081238" created="201003081235" tags="">equals(X,Y) tests that X=Y, and generates explanatory output (using a ?WHENFAIL) when the property fails.</div>
<div tiddler="eval/2" modifier="JohnHughes" modified="200705140933" created="200705140932" tags="">The eval/1 function evaluates data-structures containing symbolic function calls, of the form {call,Module,Function,Args}, which allows us to generate data in a symbolic, readable form, then evaluate it to its representation for running tests. The eqc:eval/2 function adds the capability to evaluate symbolic variables, of the form {var,Name}, to values given in a property list (see proplists) passed as the second argument. This enables us to generate //symbolic// test data before some of the values it depends on are known. Typically the values bound to symbolic variables would be created by operations with side-effects, that we do not want to invoke during test case generation.</div>
<div tiddler="exporting test cases" modifier="JohnHughes" modified="200601180844" created="200601180843" tags="">To export a test case:\n* Write a property and use quickcheck to find a counterexample.\n* Capture the counterexample by calling eqc:counterexample().\n* Copy and paste it into an explicit test case in your code, of the form test42() -&gt; check(my_property(),...the counterexample...).\n* Recompile your code using the EqcLite version of eqc.hrl, and  run it with the EqcLite versions of eqc.beam and eqc_gen.beam.\n* Now you can run explicit test cases, such as test42(), without any access to the original version of QuickCheck at all.</div>
<div tiddler="force_start() is no longer needed" modifier="JohnHughes" modified="200812091719" created="200812091719" tags="">Since version 1.14, only one instance of QuickCheck can run at a time. In that version, attempting to start a second instance created a dialogue box to ask the user whether to terminate the currently running version. Since this behaviour was inappropriate in automated test suites, a second start function eqc:force_start() was provided which simply terminated the other instance without asking.\n\nVersion 1.15 simplifies this by making the second (more useful) behaviour the default. As a result, force_start() is no longer needed.</div>
<div tiddler="is_generator" modifier="JohnHughes" modified="200812091716" created="200812091716" tags="">A new function is_generator/1 is provided, which returns true for QuickCheck generators.</div>
<div tiddler="new approach to version numbering" modifier="YourName" modified="201103151537" created="201103021104" tags="">Previously we have distributed two applications together: eqc and PULSE, and both have had their own version number. That gives the impression that one can mix-and-match versions of PULSE and eqc, but in fact this would be unlikely to work, since PULSE is used to instrument parts of eqc during the build. From version 1.24, //all applications distributed together carry the same version number//, which really refers to the package as a whole rather than the individual parts. Moreover, we now //check// that all QuickCheck applications date from the same build--which means you //must// install all of the applications together, otherwise QuickCheck will not start. \n\nUse the new installer, which does this.</div>
<div tiddler="parallel test cases" modifier="YourName" modified="201003081224" created="201003081224" tags="">eqc_statem can now generate parallel test cases from existing state-machine specifications. The parallel tests begin with a sequence of commands to put the system into a random state, then run several short command sequences in parallel, testinng that each command //behaves atomically//--that is, that the results obtained can be explained by some interleaving of the parallel commands. In order to use this feature, it is only necessary to write a new property in an eqc_statem specification, that invokes parallel_commands and run_parallel_commands instead of commands and run_commands.</div>
<div tiddler="partially shrunk counterexamples" modifier="YourName" modified="201003081259" created="201003081259" tags="">When shrinking runs for a long time, it may be useful to see the currently best shrunk failing test case. Alternatively, if shrinking crashes... or is interrupted... then the result of shrinking so far may be useful. This last failing test case is now available, as the result of eqc:current_counterexample(). The counterexample is saved in a file in the current working directory, so it can also be read from another Erlang node running in the same directory.</div>
<div tiddler="performance bug in the list generator" modifier="JohnHughes" modified="200710111827" created="200710111827" tags="">While version 1.10 made many improvements to shrinking, it also introduced a performance bug in generators of the form list(G). This bug made shrinking of longer lists generated in this way very slow indeed. The problem should no longer appear.</div>
<div tiddler="postconditions" modifier="JohnHughes" modified="200804111754" created="200804111754" tags="">Given a list of commands, and a list of their results, the postconditions function checks that all pre- and post-conditions were satisfied. This is useful if eqc_statem is used to generate commands which are then run in some //other// way than by using run_commands--for example, if they are translated to another language, compiled and run.</div>
<div tiddler="pulse" modifier="YourName" modified="200911021526" created="200911021526" tags="">PULSE is a randomizing scheduler for Erlang programs. Erlang code is automatically instrumented to communicate with PULSE before spawning processes, sending or receiving messages, performing side-effects and so on; PULSE then controls the execution so that tests are //repeatable//. PULSE is effective for finding race conditions in unit tests of concurrent code.</div>
<div tiddler="running tests for a given time" modifier="YourName" modified="201103021100" created="201103021059" tags="">A new property function ''eqc:testing_time'' is provided, which controls the number of tests just as eqc:numtests does, but instead runs tests for a given amount of  time. In conjunction with eqc:module, it can be used to (say) test each property in a module for 10 seconds.</div>
<div tiddler="treatment of exceptions during shrinking" modifier="JohnHughes" modified="200612171049" created="200612171049" tags="">Previously an exception during attempted shrinking could lead to shrinking stopping--since no smaller test cases could be found, the last test case was recorded as the smallest.  This was unhelpful when the exception was caused by a bug in a user-provided shrinking function--instead of reporting the bug, QuickCheck just stopped shrinking. This has been changed so that the test now fails in this case, with the exception raised during shrinking as the reason for failure. In particular, this should make bugs in state machine specifications easier to find.</div>
<div tiddler="watch_shrinking" modifier="JohnHughes" modified="200602010123" created="200602010123" tags="">A new function for use in the shell, eqc:watch_shrinking(), displays all the test cases explored while shrinking the last failed test, together with their test result. This can be used in two different ways:\n* To see how shrinking is being performed, so that it can be improved if necessary.\n* To compare the smallest failing test case with similar cases that do not fail. The last few test cases printed often give an immediate clue to the reason a test failed.</div>
<div tiddler="zip in eqc_statem" modifier="JohnHughes" modified="200808271919" created="200808271919" tags="">Properties that use eqc_statem often print the //history// that run_commands returns as part of the output when a test fails. To interpret the history, it is helpful to know //which command// generated each element. This can be deduced from the QuickCheck output, but may require scrolling backwards and forwards to look at the list of commands and the history alternately. By //zipping together// the list of commands and the history, that is printing zip(Cmds,H) instead of just H, each command appears in the output together with the state before it was executed, and its result.\n\nThe zip function in the lists module cannot be used for this, because it exits if passed lists of different length--and when a command in the middle of the command list fails, then the list of commands and the history are of different lengths. The zip function in eqc_statem returns the same result as lists:zip when both succeed, but when it is given lists of different lengths, it returns a list as long as its shorter argument.\n\nIn short: replace ?WHENFAIL(io:format(&quot;~p~n&quot;,[H]), in your properties by ?WHENFAIL(io:format(&quot;~p~n&quot;,[zip(Cmds,H)]).</div>
		</div>
	</body>
</html>
